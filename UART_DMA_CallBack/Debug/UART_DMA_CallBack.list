
UART_DMA_CallBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bf8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cf0  08002cf0  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08002cf0  08002cf0  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cf0  08002cf0  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf0  08002cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000040  08002d38  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08002d38  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065dc  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001479  00000000  00000000  00026644  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006a8  00000000  00000000  00027ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000620  00000000  00000000  00028168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000181db  00000000  00000000  00028788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000633e  00000000  00000000  00040963  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bd3c  00000000  00000000  00046ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d29dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001664  00000000  00000000  000d2a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ca0 	.word	0x08002ca0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08002ca0 	.word	0x08002ca0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faba 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f834 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8c2 	bl	80003b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8a2 	bl	8000378 <MX_DMA_Init>
  MX_USART4_UART_Init();
 8000234:	f000 f86e 	bl	8000314 <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA (&huart4, RxData, sizeof(RxData));/*Функция ожидания приёма данных с персонального компьютера
 8000238:	4911      	ldr	r1, [pc, #68]	; (8000280 <main+0x60>)
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <main+0x64>)
 800023c:	2201      	movs	r2, #1
 800023e:	0018      	movs	r0, r3
 8000240:	f001 fdb6 	bl	8001db0 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 8000244:	2390      	movs	r3, #144	; 0x90
 8000246:	05db      	lsls	r3, r3, #23
 8000248:	2108      	movs	r1, #8
 800024a:	0018      	movs	r0, r3
 800024c:	f000 ff76 	bl	800113c <HAL_GPIO_ReadPin>
 8000250:	0003      	movs	r3, r0
 8000252:	001a      	movs	r2, r3
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <main+0x68>)
 8000256:	601a      	str	r2, [r3, #0]
	  if ((btn_prev == 0) && (btn_cur != 0))/*Если предыдущие состояние 0,
 8000258:	4b0c      	ldr	r3, [pc, #48]	; (800028c <main+0x6c>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <main+0x54>
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <main+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d005      	beq.n	8000274 <main+0x54>
	т.е. кнопка не была нажата, и текущее состояние не равно 0, т.е. кнопка нажата*/ {
		  HAL_UART_Transmit_DMA(&huart4, (uint8_t *)TxData, sizeof(TxData));/*Передадим массив TxData
 8000268:	4909      	ldr	r1, [pc, #36]	; (8000290 <main+0x70>)
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <main+0x64>)
 800026c:	222e      	movs	r2, #46	; 0x2e
 800026e:	0018      	movs	r0, r3
 8000270:	f001 fd0c 	bl	8001c8c <HAL_UART_Transmit_DMA>
	с контроллера на персональный компьютер*/
	  }
	  btn_prev = btn_cur;/*Запоминаем текущее состояние кнопки, чтобы исключить ложное срабатывание передачи данных,
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <main+0x68>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <main+0x6c>)
 800027a:	601a      	str	r2, [r3, #0]
	  btn_cur = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);/*Считываем состояние кнопки*/
 800027c:	e7e2      	b.n	8000244 <main+0x24>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	20000178 	.word	0x20000178
 8000284:	200000f4 	.word	0x200000f4
 8000288:	20000060 	.word	0x20000060
 800028c:	2000005c 	.word	0x2000005c
 8000290:	20000000 	.word	0x20000000

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b093      	sub	sp, #76	; 0x4c
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	2414      	movs	r4, #20
 800029c:	193b      	adds	r3, r7, r4
 800029e:	0018      	movs	r0, r3
 80002a0:	2334      	movs	r3, #52	; 0x34
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fcf3 	bl	8002c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	0018      	movs	r0, r3
 80002ae:	2310      	movs	r3, #16
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 fcec 	bl	8002c90 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2210      	movs	r2, #16
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f000 ff87 	bl	80011e8 <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002de:	f000 f925 	bl	800052c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 faf8 	bl	80018f4 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000308:	f000 f910 	bl	800052c <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b013      	add	sp, #76	; 0x4c
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 800031a:	4a16      	ldr	r2, [pc, #88]	; (8000374 <MX_USART4_UART_Init+0x60>)
 800031c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000320:	22e1      	movs	r2, #225	; 0xe1
 8000322:	0252      	lsls	r2, r2, #9
 8000324:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_9B;
 8000326:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000328:	2280      	movs	r2, #128	; 0x80
 800032a:	0152      	lsls	r2, r2, #5
 800032c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800032e:	4b10      	ldr	r3, [pc, #64]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000334:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	00d2      	lsls	r2, r2, #3
 800033a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 800033e:	220c      	movs	r2, #12
 8000340:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000344:	2200      	movs	r2, #0
 8000346:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 800034a:	2200      	movs	r2, #0
 800034c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800034e:	4b08      	ldr	r3, [pc, #32]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000350:	2200      	movs	r2, #0
 8000352:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <MX_USART4_UART_Init+0x5c>)
 800035c:	0018      	movs	r0, r3
 800035e:	f001 fc41 	bl	8001be4 <HAL_UART_Init>
 8000362:	1e03      	subs	r3, r0, #0
 8000364:	d001      	beq.n	800036a <MX_USART4_UART_Init+0x56>
  {
    Error_Handler();
 8000366:	f000 f8e1 	bl	800052c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	200000f4 	.word	0x200000f4
 8000374:	40004c00 	.word	0x40004c00

08000378 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_DMA_Init+0x38>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <MX_DMA_Init+0x38>)
 8000384:	2101      	movs	r1, #1
 8000386:	430a      	orrs	r2, r1
 8000388:	615a      	str	r2, [r3, #20]
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_DMA_Init+0x38>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	2201      	movs	r2, #1
 8000390:	4013      	ands	r3, r2
 8000392:	607b      	str	r3, [r7, #4]
 8000394:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	200b      	movs	r0, #11
 800039c:	f000 fb0e 	bl	80009bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80003a0:	200b      	movs	r0, #11
 80003a2:	f000 fb20 	bl	80009e6 <HAL_NVIC_EnableIRQ>

}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	46bd      	mov	sp, r7
 80003aa:	b002      	add	sp, #8
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	40021000 	.word	0x40021000

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b590      	push	{r4, r7, lr}
 80003b6:	b089      	sub	sp, #36	; 0x24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	240c      	movs	r4, #12
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	0018      	movs	r0, r3
 80003c0:	2314      	movs	r3, #20
 80003c2:	001a      	movs	r2, r3
 80003c4:	2100      	movs	r1, #0
 80003c6:	f002 fc63 	bl	8002c90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b24      	ldr	r3, [pc, #144]	; (800045c <MX_GPIO_Init+0xa8>)
 80003cc:	695a      	ldr	r2, [r3, #20]
 80003ce:	4b23      	ldr	r3, [pc, #140]	; (800045c <MX_GPIO_Init+0xa8>)
 80003d0:	2180      	movs	r1, #128	; 0x80
 80003d2:	0289      	lsls	r1, r1, #10
 80003d4:	430a      	orrs	r2, r1
 80003d6:	615a      	str	r2, [r3, #20]
 80003d8:	4b20      	ldr	r3, [pc, #128]	; (800045c <MX_GPIO_Init+0xa8>)
 80003da:	695a      	ldr	r2, [r3, #20]
 80003dc:	2380      	movs	r3, #128	; 0x80
 80003de:	029b      	lsls	r3, r3, #10
 80003e0:	4013      	ands	r3, r2
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e6:	4b1d      	ldr	r3, [pc, #116]	; (800045c <MX_GPIO_Init+0xa8>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	4b1c      	ldr	r3, [pc, #112]	; (800045c <MX_GPIO_Init+0xa8>)
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	02c9      	lsls	r1, r1, #11
 80003f0:	430a      	orrs	r2, r1
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	4b19      	ldr	r3, [pc, #100]	; (800045c <MX_GPIO_Init+0xa8>)
 80003f6:	695a      	ldr	r2, [r3, #20]
 80003f8:	2380      	movs	r3, #128	; 0x80
 80003fa:	02db      	lsls	r3, r3, #11
 80003fc:	4013      	ands	r3, r2
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000402:	4b17      	ldr	r3, [pc, #92]	; (8000460 <MX_GPIO_Init+0xac>)
 8000404:	2200      	movs	r2, #0
 8000406:	2104      	movs	r1, #4
 8000408:	0018      	movs	r0, r3
 800040a:	f000 feb4 	bl	8001176 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800040e:	193b      	adds	r3, r7, r4
 8000410:	2208      	movs	r2, #8
 8000412:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	193b      	adds	r3, r7, r4
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000420:	193a      	adds	r2, r7, r4
 8000422:	2390      	movs	r3, #144	; 0x90
 8000424:	05db      	lsls	r3, r3, #23
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fd0f 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800042e:	0021      	movs	r1, r4
 8000430:	187b      	adds	r3, r7, r1
 8000432:	2204      	movs	r2, #4
 8000434:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000436:	187b      	adds	r3, r7, r1
 8000438:	2201      	movs	r2, #1
 800043a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	187b      	adds	r3, r7, r1
 800043e:	2200      	movs	r2, #0
 8000440:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2200      	movs	r2, #0
 8000446:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000448:	187b      	adds	r3, r7, r1
 800044a:	4a05      	ldr	r2, [pc, #20]	; (8000460 <MX_GPIO_Init+0xac>)
 800044c:	0019      	movs	r1, r3
 800044e:	0010      	movs	r0, r2
 8000450:	f000 fcfc 	bl	8000e4c <HAL_GPIO_Init>

}
 8000454:	46c0      	nop			; (mov r8, r8)
 8000456:	46bd      	mov	sp, r7
 8000458:	b009      	add	sp, #36	; 0x24
 800045a:	bd90      	pop	{r4, r7, pc}
 800045c:	40021000 	.word	0x40021000
 8000460:	48000400 	.word	0x48000400

08000464 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {/*Callback функция, срабатываемая после передачи данных
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
с контроллера на персональный компьютер*/
	if(huart == &huart4) {/*Обязательно проверяем откуда пришёл Callback, если пришёл от используемого UART,
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_UART_TxCpltCallback+0x6c>)
 8000470:	429a      	cmp	r2, r3
 8000472:	d129      	bne.n	80004c8 <HAL_UART_TxCpltCallback+0x64>
	то начинаем выполнять следующую работу*/

		while(i<=2*n-1) {/*Если "зашли" в Callback, то есть была передача данных с контроллера на персональный
 8000474:	e017      	b.n	80004a6 <HAL_UART_TxCpltCallback+0x42>
	компьютер, то проверяем значение счётчика i*/
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);/*Если i меньше заданного значения,
 8000476:	4b17      	ldr	r3, [pc, #92]	; (80004d4 <HAL_UART_TxCpltCallback+0x70>)
 8000478:	2104      	movs	r1, #4
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fe98 	bl	80011b0 <HAL_GPIO_TogglePin>
	то меняем состояние светодиода*/
			i=i+1;//увеличиваем значение i на 1
 8000480:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <HAL_UART_TxCpltCallback+0x74>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <HAL_UART_TxCpltCallback+0x74>)
 8000488:	601a      	str	r2, [r3, #0]
			while(count<200000){/*Счётчик для организации временной задержки между включением/выключением
 800048a:	e004      	b.n	8000496 <HAL_UART_TxCpltCallback+0x32>
	светодиода*/
				count++;/*Пока значение переменной count меньше 200000, то увеличиваем его на 1*/
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <HAL_UART_TxCpltCallback+0x78>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	1c5a      	adds	r2, r3, #1
 8000492:	4b12      	ldr	r3, [pc, #72]	; (80004dc <HAL_UART_TxCpltCallback+0x78>)
 8000494:	601a      	str	r2, [r3, #0]
			while(count<200000){/*Счётчик для организации временной задержки между включением/выключением
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <HAL_UART_TxCpltCallback+0x78>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <HAL_UART_TxCpltCallback+0x7c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	ddf5      	ble.n	800048c <HAL_UART_TxCpltCallback+0x28>
			};
			count=0;/*После работы цикла счётчика обязательно обнуляем переменную счётчика count*/
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_UART_TxCpltCallback+0x78>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
		while(i<=2*n-1) {/*Если "зашли" в Callback, то есть была передача данных с контроллера на персональный
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_UART_TxCpltCallback+0x80>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_UART_TxCpltCallback+0x74>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	429a      	cmp	r2, r3
 80004b4:	dadf      	bge.n	8000476 <HAL_UART_TxCpltCallback+0x12>
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);/*принудительно гасим светодиод после выполнения
 80004b6:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <HAL_UART_TxCpltCallback+0x70>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 fe5a 	bl	8001176 <HAL_GPIO_WritePin>
	цикла моргания*/
		i=0;/*Обязательно обнуляем переменную i*/
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <HAL_UART_TxCpltCallback+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]

	}
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	200000f4 	.word	0x200000f4
 80004d4:	48000400 	.word	0x48000400
 80004d8:	20000064 	.word	0x20000064
 80004dc:	20000068 	.word	0x20000068
 80004e0:	00030d3f 	.word	0x00030d3f
 80004e4:	20000030 	.word	0x20000030

080004e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {/*Callback функция, срабатываемая после передачи данных
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
с персонального компьютера на контроллер*/
	if(huart == &huart4) {/*Обязательно проверяем откуда пришёл Callback, если пришёл от используемого UART,
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_UART_RxCpltCallback+0x38>)
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d10e      	bne.n	8000516 <HAL_UART_RxCpltCallback+0x2e>
	то начинаем выполнять следующую работу*/

		if (RxData[0] == '1') {/*Если первый элемент массива равен 1, то*/
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <HAL_UART_RxCpltCallback+0x3c>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b31      	cmp	r3, #49	; 0x31
 80004fe:	d104      	bne.n	800050a <HAL_UART_RxCpltCallback+0x22>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);/*Поменяем состояние светодиода*/
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_UART_RxCpltCallback+0x40>)
 8000502:	2104      	movs	r1, #4
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fe53 	bl	80011b0 <HAL_GPIO_TogglePin>
		}
		HAL_UART_Receive_DMA (&huart4, RxData, sizeof(RxData));/*Обязательно включим функцию ожидания приёма данных
 800050a:	4906      	ldr	r1, [pc, #24]	; (8000524 <HAL_UART_RxCpltCallback+0x3c>)
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <HAL_UART_RxCpltCallback+0x38>)
 800050e:	2201      	movs	r2, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f001 fc4d 	bl	8001db0 <HAL_UART_Receive_DMA>
	с персонального компьютера на контроллер*/

	}
}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b002      	add	sp, #8
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	200000f4 	.word	0x200000f4
 8000524:	20000178 	.word	0x20000178
 8000528:	48000400 	.word	0x48000400

0800052c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000530:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000532:	e7fe      	b.n	8000532 <Error_Handler+0x6>

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x44>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <HAL_MspInit+0x44>)
 8000540:	2101      	movs	r1, #1
 8000542:	430a      	orrs	r2, r1
 8000544:	619a      	str	r2, [r3, #24]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x44>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	2201      	movs	r2, #1
 800054c:	4013      	ands	r3, r2
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000552:	4b09      	ldr	r3, [pc, #36]	; (8000578 <HAL_MspInit+0x44>)
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b08      	ldr	r3, [pc, #32]	; (8000578 <HAL_MspInit+0x44>)
 8000558:	2180      	movs	r1, #128	; 0x80
 800055a:	0549      	lsls	r1, r1, #21
 800055c:	430a      	orrs	r2, r1
 800055e:	61da      	str	r2, [r3, #28]
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <HAL_MspInit+0x44>)
 8000562:	69da      	ldr	r2, [r3, #28]
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	055b      	lsls	r3, r3, #21
 8000568:	4013      	ands	r3, r2
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	2314      	movs	r3, #20
 8000586:	18fb      	adds	r3, r7, r3
 8000588:	0018      	movs	r0, r3
 800058a:	2314      	movs	r3, #20
 800058c:	001a      	movs	r2, r3
 800058e:	2100      	movs	r1, #0
 8000590:	f002 fb7e 	bl	8002c90 <memset>
  if(huart->Instance==USART4)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a47      	ldr	r2, [pc, #284]	; (80006b8 <HAL_UART_MspInit+0x13c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d000      	beq.n	80005a0 <HAL_UART_MspInit+0x24>
 800059e:	e086      	b.n	80006ae <HAL_UART_MspInit+0x132>
  {
  /* USER CODE BEGIN USART4_MspInit 0 */

  /* USER CODE END USART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART4_CLK_ENABLE();
 80005a0:	4b46      	ldr	r3, [pc, #280]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	4b45      	ldr	r3, [pc, #276]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0309      	lsls	r1, r1, #12
 80005aa:	430a      	orrs	r2, r1
 80005ac:	61da      	str	r2, [r3, #28]
 80005ae:	4b43      	ldr	r3, [pc, #268]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005b0:	69da      	ldr	r2, [r3, #28]
 80005b2:	2380      	movs	r3, #128	; 0x80
 80005b4:	031b      	lsls	r3, r3, #12
 80005b6:	4013      	ands	r3, r2
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	4b3e      	ldr	r3, [pc, #248]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0289      	lsls	r1, r1, #10
 80005c6:	430a      	orrs	r2, r1
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <HAL_UART_MspInit+0x140>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	029b      	lsls	r3, r3, #10
 80005d2:	4013      	ands	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	68fb      	ldr	r3, [r7, #12]
    /**USART4 GPIO Configuration
    PA0     ------> USART4_TX
    PA1     ------> USART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005d8:	2114      	movs	r1, #20
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2203      	movs	r2, #3
 80005de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2202      	movs	r2, #2
 80005e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2203      	movs	r2, #3
 80005f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2204      	movs	r2, #4
 80005f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	187a      	adds	r2, r7, r1
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fc23 	bl	8000e4c <HAL_GPIO_Init>

    /* USART4 DMA Init */
    /* USART4_RX Init */
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8000606:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000608:	4a2e      	ldr	r2, [pc, #184]	; (80006c4 <HAL_UART_MspInit+0x148>)
 800060a:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800060c:	4b2c      	ldr	r3, [pc, #176]	; (80006c0 <HAL_UART_MspInit+0x144>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000618:	4b29      	ldr	r3, [pc, #164]	; (80006c0 <HAL_UART_MspInit+0x144>)
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800061e:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <HAL_UART_MspInit+0x144>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8000636:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <HAL_UART_MspInit+0x144>)
 8000638:	0018      	movs	r0, r3
 800063a:	f000 f9f1 	bl	8000a20 <HAL_DMA_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000642:	f7ff ff73 	bl	800052c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart4_rx);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	4a1d      	ldr	r2, [pc, #116]	; (80006c0 <HAL_UART_MspInit+0x144>)
 800064a:	671a      	str	r2, [r3, #112]	; 0x70
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_UART_MspInit+0x144>)
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART4_TX Init */
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8000652:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000654:	4a1d      	ldr	r2, [pc, #116]	; (80006cc <HAL_UART_MspInit+0x150>)
 8000656:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000658:	4b1b      	ldr	r3, [pc, #108]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 800065a:	2210      	movs	r2, #16
 800065c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800065e:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000684:	0018      	movs	r0, r3
 8000686:	f000 f9cb 	bl	8000a20 <HAL_DMA_Init>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800068e:	f7ff ff4d 	bl	800052c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart4_tx);
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4a0c      	ldr	r2, [pc, #48]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 8000696:	66da      	str	r2, [r3, #108]	; 0x6c
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <HAL_UART_MspInit+0x14c>)
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART4 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	201d      	movs	r0, #29
 80006a4:	f000 f98a 	bl	80009bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80006a8:	201d      	movs	r0, #29
 80006aa:	f000 f99c 	bl	80009e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b00a      	add	sp, #40	; 0x28
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	40004c00 	.word	0x40004c00
 80006bc:	40021000 	.word	0x40021000
 80006c0:	200000b0 	.word	0x200000b0
 80006c4:	4002006c 	.word	0x4002006c
 80006c8:	2000006c 	.word	0x2000006c
 80006cc:	40020080 	.word	0x40020080

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006e0:	46c0      	nop			; (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}

080006e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f89a 	bl	800082c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, 5, 6 and 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fab6 	bl	8000c78 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800070c:	4b04      	ldr	r3, [pc, #16]	; (8000720 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fab2 	bl	8000c78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200000b0 	.word	0x200000b0
 8000720:	2000006c 	.word	0x2000006c

08000724 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <USART3_4_IRQHandler+0x14>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fb90 	bl	8001e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	200000f4 	.word	0x200000f4

0800073c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <LoopForever+0x6>)
  ldr r1, =_edata
 800074e:	490e      	ldr	r1, [pc, #56]	; (8000788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000750:	4a0e      	ldr	r2, [pc, #56]	; (800078c <LoopForever+0xe>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0b      	ldr	r2, [pc, #44]	; (8000790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000764:	4c0b      	ldr	r4, [pc, #44]	; (8000794 <LoopForever+0x16>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000772:	f7ff ffe3 	bl	800073c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000776:	f002 fa67 	bl	8002c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fd51 	bl	8000220 <main>

0800077e <LoopForever>:

LoopForever:
    b LoopForever
 800077e:	e7fe      	b.n	800077e <LoopForever>
  ldr   r0, =_estack
 8000780:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800078c:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 8000790:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000794:	20000180 	.word	0x20000180

08000798 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_COMP_IRQHandler>
	...

0800079c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_Init+0x24>)
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_Init+0x24>)
 80007a6:	2110      	movs	r1, #16
 80007a8:	430a      	orrs	r2, r1
 80007aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 f809 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b2:	f7ff febf 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
}
 80007b8:	0018      	movs	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_InitTick+0x5c>)
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_InitTick+0x60>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	0019      	movs	r1, r3
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	0098      	lsls	r0, r3, #2
 80007da:	f7ff fc95 	bl	8000108 <__udivsi3>
 80007de:	0003      	movs	r3, r0
 80007e0:	0019      	movs	r1, r3
 80007e2:	0020      	movs	r0, r4
 80007e4:	f7ff fc90 	bl	8000108 <__udivsi3>
 80007e8:	0003      	movs	r3, r0
 80007ea:	0018      	movs	r0, r3
 80007ec:	f000 f90b 	bl	8000a06 <HAL_SYSTICK_Config>
 80007f0:	1e03      	subs	r3, r0, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e00f      	b.n	8000818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d80b      	bhi.n	8000816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	2301      	movs	r3, #1
 8000802:	425b      	negs	r3, r3
 8000804:	2200      	movs	r2, #0
 8000806:	0018      	movs	r0, r3
 8000808:	f000 f8d8 	bl	80009bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_InitTick+0x64>)
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000812:	2300      	movs	r3, #0
 8000814:	e000      	b.n	8000818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
}
 8000818:	0018      	movs	r0, r3
 800081a:	46bd      	mov	sp, r7
 800081c:	b003      	add	sp, #12
 800081e:	bd90      	pop	{r4, r7, pc}
 8000820:	20000034 	.word	0x20000034
 8000824:	2000003c 	.word	0x2000003c
 8000828:	20000038 	.word	0x20000038

0800082c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x1c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	001a      	movs	r2, r3
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <HAL_IncTick+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	18d2      	adds	r2, r2, r3
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_IncTick+0x20>)
 800083e:	601a      	str	r2, [r3, #0]
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	2000003c 	.word	0x2000003c
 800084c:	2000017c 	.word	0x2000017c

08000850 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  return uwTick;
 8000854:	4b02      	ldr	r3, [pc, #8]	; (8000860 <HAL_GetTick+0x10>)
 8000856:	681b      	ldr	r3, [r3, #0]
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	2000017c 	.word	0x2000017c

08000864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	0002      	movs	r2, r0
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b7f      	cmp	r3, #127	; 0x7f
 8000876:	d809      	bhi.n	800088c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	001a      	movs	r2, r3
 800087e:	231f      	movs	r3, #31
 8000880:	401a      	ands	r2, r3
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_EnableIRQ+0x30>)
 8000884:	2101      	movs	r1, #1
 8000886:	4091      	lsls	r1, r2
 8000888:	000a      	movs	r2, r1
 800088a:	601a      	str	r2, [r3, #0]
  }
}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	0002      	movs	r2, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b7f      	cmp	r3, #127	; 0x7f
 80008ac:	d828      	bhi.n	8000900 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ae:	4a2f      	ldr	r2, [pc, #188]	; (800096c <__NVIC_SetPriority+0xd4>)
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	33c0      	adds	r3, #192	; 0xc0
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	589b      	ldr	r3, [r3, r2]
 80008be:	1dfa      	adds	r2, r7, #7
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	0011      	movs	r1, r2
 80008c4:	2203      	movs	r2, #3
 80008c6:	400a      	ands	r2, r1
 80008c8:	00d2      	lsls	r2, r2, #3
 80008ca:	21ff      	movs	r1, #255	; 0xff
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	43d2      	mvns	r2, r2
 80008d2:	401a      	ands	r2, r3
 80008d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	401a      	ands	r2, r3
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	2303      	movs	r3, #3
 80008e6:	4003      	ands	r3, r0
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	481f      	ldr	r0, [pc, #124]	; (800096c <__NVIC_SetPriority+0xd4>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	089b      	lsrs	r3, r3, #2
 80008f6:	430a      	orrs	r2, r1
 80008f8:	33c0      	adds	r3, #192	; 0xc0
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008fe:	e031      	b.n	8000964 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <__NVIC_SetPriority+0xd8>)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0019      	movs	r1, r3
 8000908:	230f      	movs	r3, #15
 800090a:	400b      	ands	r3, r1
 800090c:	3b08      	subs	r3, #8
 800090e:	089b      	lsrs	r3, r3, #2
 8000910:	3306      	adds	r3, #6
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	3304      	adds	r3, #4
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1dfa      	adds	r2, r7, #7
 800091c:	7812      	ldrb	r2, [r2, #0]
 800091e:	0011      	movs	r1, r2
 8000920:	2203      	movs	r2, #3
 8000922:	400a      	ands	r2, r1
 8000924:	00d2      	lsls	r2, r2, #3
 8000926:	21ff      	movs	r1, #255	; 0xff
 8000928:	4091      	lsls	r1, r2
 800092a:	000a      	movs	r2, r1
 800092c:	43d2      	mvns	r2, r2
 800092e:	401a      	ands	r2, r3
 8000930:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	019b      	lsls	r3, r3, #6
 8000936:	22ff      	movs	r2, #255	; 0xff
 8000938:	401a      	ands	r2, r3
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	0018      	movs	r0, r3
 8000940:	2303      	movs	r3, #3
 8000942:	4003      	ands	r3, r0
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <__NVIC_SetPriority+0xd8>)
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	001c      	movs	r4, r3
 8000950:	230f      	movs	r3, #15
 8000952:	4023      	ands	r3, r4
 8000954:	3b08      	subs	r3, #8
 8000956:	089b      	lsrs	r3, r3, #2
 8000958:	430a      	orrs	r2, r1
 800095a:	3306      	adds	r3, #6
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	18c3      	adds	r3, r0, r3
 8000960:	3304      	adds	r3, #4
 8000962:	601a      	str	r2, [r3, #0]
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b003      	add	sp, #12
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	e000e100 	.word	0xe000e100
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	4a0c      	ldr	r2, [pc, #48]	; (80009b4 <SysTick_Config+0x40>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d901      	bls.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e010      	b.n	80009ac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <SysTick_Config+0x44>)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	3a01      	subs	r2, #1
 8000990:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	2301      	movs	r3, #1
 8000994:	425b      	negs	r3, r3
 8000996:	2103      	movs	r1, #3
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff ff7d 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SysTick_Config+0x44>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <SysTick_Config+0x44>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	00ffffff 	.word	0x00ffffff
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	210f      	movs	r1, #15
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	1c02      	adds	r2, r0, #0
 80009cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b25b      	sxtb	r3, r3
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b004      	add	sp, #16
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	0002      	movs	r2, r0
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ff33 	bl	8000864 <__NVIC_EnableIRQ>
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff ffaf 	bl	8000974 <SysTick_Config>
 8000a16:	0003      	movs	r3, r0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d101      	bne.n	8000a36 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a32:	2301      	movs	r3, #1
 8000a34:	e036      	b.n	8000aa4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2221      	movs	r2, #33	; 0x21
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4a18      	ldr	r2, [pc, #96]	; (8000aac <HAL_DMA_Init+0x8c>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 f9c4 	bl	8000e14 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2221      	movs	r2, #33	; 0x21
 8000a96:	2101      	movs	r1, #1
 8000a98:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
}  
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b004      	add	sp, #16
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	ffffc00f 	.word	0xffffc00f

08000ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000abe:	2317      	movs	r3, #23
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	2220      	movs	r2, #32
 8000aca:	5c9b      	ldrb	r3, [r3, r2]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d101      	bne.n	8000ad4 <HAL_DMA_Start_IT+0x24>
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	e04f      	b.n	8000b74 <HAL_DMA_Start_IT+0xc4>
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2101      	movs	r1, #1
 8000ada:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2221      	movs	r2, #33	; 0x21
 8000ae0:	5c9b      	ldrb	r3, [r3, r2]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d13a      	bne.n	8000b5e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2221      	movs	r2, #33	; 0x21
 8000aec:	2102      	movs	r1, #2
 8000aee:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2200      	movs	r2, #0
 8000af4:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	438a      	bics	r2, r1
 8000b04:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	68f8      	ldr	r0, [r7, #12]
 8000b0e:	f000 f955 	bl	8000dbc <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d008      	beq.n	8000b2c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	210e      	movs	r1, #14
 8000b26:	430a      	orrs	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	e00f      	b.n	8000b4c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	210a      	movs	r1, #10
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2104      	movs	r1, #4
 8000b48:	438a      	bics	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2101      	movs	r1, #1
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	e007      	b.n	8000b6e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2220      	movs	r2, #32
 8000b62:	2100      	movs	r1, #0
 8000b64:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000b66:	2317      	movs	r3, #23
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000b6e:	2317      	movs	r3, #23
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	781b      	ldrb	r3, [r3, #0]
} 
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b006      	add	sp, #24
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2221      	movs	r2, #33	; 0x21
 8000b88:	5c9b      	ldrb	r3, [r3, r2]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d008      	beq.n	8000ba2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2204      	movs	r2, #4
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2220      	movs	r2, #32
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e020      	b.n	8000be4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	210e      	movs	r1, #14
 8000bae:	438a      	bics	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bca:	2101      	movs	r1, #1
 8000bcc:	4091      	lsls	r1, r2
 8000bce:	000a      	movs	r2, r1
 8000bd0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2221      	movs	r2, #33	; 0x21
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b002      	add	sp, #8
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2221      	movs	r2, #33	; 0x21
 8000c00:	5c9b      	ldrb	r3, [r3, r2]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	2b02      	cmp	r3, #2
 8000c06:	d007      	beq.n	8000c18 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
 8000c16:	e028      	b.n	8000c6a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	210e      	movs	r1, #14
 8000c24:	438a      	bics	r2, r1
 8000c26:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2101      	movs	r1, #1
 8000c34:	438a      	bics	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c40:	2101      	movs	r1, #1
 8000c42:	4091      	lsls	r1, r2
 8000c44:	000a      	movs	r2, r1
 8000c46:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2221      	movs	r2, #33	; 0x21
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2220      	movs	r2, #32
 8000c54:	2100      	movs	r1, #0
 8000c56:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d004      	beq.n	8000c6a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	0010      	movs	r0, r2
 8000c68:	4798      	blx	r3
    } 
  }
  return status;
 8000c6a:	230f      	movs	r3, #15
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b004      	add	sp, #16
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	2204      	movs	r2, #4
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	d024      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d020      	beq.n	8000cea <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2220      	movs	r2, #32
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d107      	bne.n	8000cc4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	438a      	bics	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ccc:	2104      	movs	r1, #4
 8000cce:	4091      	lsls	r1, r2
 8000cd0:	000a      	movs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d100      	bne.n	8000cde <HAL_DMA_IRQHandler+0x66>
 8000cdc:	e06a      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	0010      	movs	r0, r2
 8000ce6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000ce8:	e064      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	2202      	movs	r2, #2
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	d02b      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xda>
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d027      	beq.n	8000d52 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2220      	movs	r2, #32
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d10b      	bne.n	8000d26 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	210a      	movs	r1, #10
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2221      	movs	r2, #33	; 0x21
 8000d22:	2101      	movs	r1, #1
 8000d24:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2220      	movs	r2, #32
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d036      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	0010      	movs	r0, r2
 8000d4e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000d50:	e030      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	2208      	movs	r2, #8
 8000d58:	409a      	lsls	r2, r3
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d028      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4013      	ands	r3, r2
 8000d68:	d024      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	210e      	movs	r1, #14
 8000d76:	438a      	bics	r2, r1
 8000d78:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d82:	2101      	movs	r1, #1
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2221      	movs	r2, #33	; 0x21
 8000d94:	2101      	movs	r1, #1
 8000d96:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2220      	movs	r2, #32
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d005      	beq.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	0010      	movs	r0, r2
 8000db0:	4798      	blx	r3
    }
   }
}  
 8000db2:	e7ff      	b.n	8000db4 <HAL_DMA_IRQHandler+0x13c>
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b004      	add	sp, #16
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	000a      	movs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	d108      	bne.n	8000dfc <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000dfa:	e007      	b.n	8000e0c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	68ba      	ldr	r2, [r7, #8]
 8000e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	60da      	str	r2, [r3, #12]
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <DMA_CalcBaseAndBitshift+0x30>)
 8000e22:	4694      	mov	ip, r2
 8000e24:	4463      	add	r3, ip
 8000e26:	2114      	movs	r1, #20
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff f96d 	bl	8000108 <__udivsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	009a      	lsls	r2, r3, #2
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <DMA_CalcBaseAndBitshift+0x34>)
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	bffdfff8 	.word	0xbffdfff8
 8000e48:	40020000 	.word	0x40020000

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e155      	b.n	8001108 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d100      	bne.n	8000e74 <HAL_GPIO_Init+0x28>
 8000e72:	e146      	b.n	8001102 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d00b      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d007      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	2b11      	cmp	r3, #17
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d130      	bne.n	8000ef6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	409a      	lsls	r2, r3
 8000ea2:	0013      	movs	r3, r2
 8000ea4:	43da      	mvns	r2, r3
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	409a      	lsls	r2, r3
 8000eb6:	0013      	movs	r3, r2
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eca:	2201      	movs	r2, #1
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	091b      	lsrs	r3, r3, #4
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	409a      	lsls	r2, r3
 8000f04:	0013      	movs	r3, r2
 8000f06:	43da      	mvns	r2, r3
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	0013      	movs	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0xea>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b12      	cmp	r3, #18
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	0092      	lsls	r2, r2, #2
 8000f40:	58d3      	ldr	r3, [r2, r3]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2207      	movs	r2, #7
 8000f48:	4013      	ands	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2107      	movs	r1, #7
 8000f62:	400b      	ands	r3, r1
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	6939      	ldr	r1, [r7, #16]
 8000f7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	401a      	ands	r2, r3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685a      	ldr	r2, [r3, #4]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	055b      	lsls	r3, r3, #21
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d100      	bne.n	8000fc0 <HAL_GPIO_Init+0x174>
 8000fbe:	e0a0      	b.n	8001102 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b57      	ldr	r3, [pc, #348]	; (8001120 <HAL_GPIO_Init+0x2d4>)
 8000fc2:	699a      	ldr	r2, [r3, #24]
 8000fc4:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HAL_GPIO_Init+0x2d4>)
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	4b54      	ldr	r3, [pc, #336]	; (8001120 <HAL_GPIO_Init+0x2d4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	589b      	ldr	r3, [r3, r2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	429a      	cmp	r2, r3
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x1ee>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2dc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1ea>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2e0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1e6>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_GPIO_Init+0x2e4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1e2>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_GPIO_Init+0x2e8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1de>
 8001026:	2304      	movs	r3, #4
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x1f0>
 800102a:	2305      	movs	r3, #5
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x1f0>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x1f0>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x1f0>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x1f0>
 800103a:	2300      	movs	r3, #0
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	2103      	movs	r1, #3
 8001040:	400a      	ands	r2, r1
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x2d8>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	035b      	lsls	r3, r3, #13
 80010c6:	4013      	ands	r3, r2
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	4013      	ands	r3, r2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_GPIO_Init+0x2ec>)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	40da      	lsrs	r2, r3
 8001110:	1e13      	subs	r3, r2, #0
 8001112:	d000      	beq.n	8001116 <HAL_GPIO_Init+0x2ca>
 8001114:	e6a2      	b.n	8000e5c <HAL_GPIO_Init+0x10>
  } 
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b006      	add	sp, #24
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	48000400 	.word	0x48000400
 800112c:	48000800 	.word	0x48000800
 8001130:	48000c00 	.word	0x48000c00
 8001134:	48001000 	.word	0x48001000
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	000a      	movs	r2, r1
 8001146:	1cbb      	adds	r3, r7, #2
 8001148:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	1cba      	adds	r2, r7, #2
 8001150:	8812      	ldrh	r2, [r2, #0]
 8001152:	4013      	ands	r3, r2
 8001154:	d004      	beq.n	8001160 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001156:	230f      	movs	r3, #15
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e003      	b.n	8001168 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001160:	230f      	movs	r3, #15
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001168:	230f      	movs	r3, #15
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	781b      	ldrb	r3, [r3, #0]
  }
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b004      	add	sp, #16
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	0008      	movs	r0, r1
 8001180:	0011      	movs	r1, r2
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	1c02      	adds	r2, r0, #0
 8001186:	801a      	strh	r2, [r3, #0]
 8001188:	1c7b      	adds	r3, r7, #1
 800118a:	1c0a      	adds	r2, r1, #0
 800118c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800118e:	1c7b      	adds	r3, r7, #1
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d004      	beq.n	80011a0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001196:	1cbb      	adds	r3, r7, #2
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800119e:	e003      	b.n	80011a8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a0:	1cbb      	adds	r3, r7, #2
 80011a2:	881a      	ldrh	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	000a      	movs	r2, r1
 80011ba:	1cbb      	adds	r3, r7, #2
 80011bc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011c4:	1cbb      	adds	r3, r7, #2
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	041a      	lsls	r2, r3, #16
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	1cb9      	adds	r1, r7, #2
 80011d4:	8809      	ldrh	r1, [r1, #0]
 80011d6:	400b      	ands	r3, r1
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b004      	add	sp, #16
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f000 fb76 	bl	80018e8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2201      	movs	r2, #1
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x20>
 8001206:	e08e      	b.n	8001326 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001208:	4bc5      	ldr	r3, [pc, #788]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	220c      	movs	r2, #12
 800120e:	4013      	ands	r3, r2
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00e      	beq.n	8001232 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001214:	4bc2      	ldr	r3, [pc, #776]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	220c      	movs	r2, #12
 800121a:	4013      	ands	r3, r2
 800121c:	2b08      	cmp	r3, #8
 800121e:	d117      	bne.n	8001250 <HAL_RCC_OscConfig+0x68>
 8001220:	4bbf      	ldr	r3, [pc, #764]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	23c0      	movs	r3, #192	; 0xc0
 8001226:	025b      	lsls	r3, r3, #9
 8001228:	401a      	ands	r2, r3
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	025b      	lsls	r3, r3, #9
 800122e:	429a      	cmp	r2, r3
 8001230:	d10e      	bne.n	8001250 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001232:	4bbb      	ldr	r3, [pc, #748]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	029b      	lsls	r3, r3, #10
 800123a:	4013      	ands	r3, r2
 800123c:	d100      	bne.n	8001240 <HAL_RCC_OscConfig+0x58>
 800123e:	e071      	b.n	8001324 <HAL_RCC_OscConfig+0x13c>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d000      	beq.n	800124a <HAL_RCC_OscConfig+0x62>
 8001248:	e06c      	b.n	8001324 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	f000 fb4c 	bl	80018e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <HAL_RCC_OscConfig+0x80>
 8001258:	4bb1      	ldr	r3, [pc, #708]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4bb0      	ldr	r3, [pc, #704]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	0249      	lsls	r1, r1, #9
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e02f      	b.n	80012c8 <HAL_RCC_OscConfig+0xe0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10c      	bne.n	800128a <HAL_RCC_OscConfig+0xa2>
 8001270:	4bab      	ldr	r3, [pc, #684]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4baa      	ldr	r3, [pc, #680]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001276:	49ab      	ldr	r1, [pc, #684]	; (8001524 <HAL_RCC_OscConfig+0x33c>)
 8001278:	400a      	ands	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	4ba8      	ldr	r3, [pc, #672]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4ba7      	ldr	r3, [pc, #668]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001282:	49a9      	ldr	r1, [pc, #676]	; (8001528 <HAL_RCC_OscConfig+0x340>)
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e01e      	b.n	80012c8 <HAL_RCC_OscConfig+0xe0>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b05      	cmp	r3, #5
 8001290:	d10e      	bne.n	80012b0 <HAL_RCC_OscConfig+0xc8>
 8001292:	4ba3      	ldr	r3, [pc, #652]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4ba2      	ldr	r3, [pc, #648]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	02c9      	lsls	r1, r1, #11
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	4b9f      	ldr	r3, [pc, #636]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b9e      	ldr	r3, [pc, #632]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012a6:	2180      	movs	r1, #128	; 0x80
 80012a8:	0249      	lsls	r1, r1, #9
 80012aa:	430a      	orrs	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0xe0>
 80012b0:	4b9b      	ldr	r3, [pc, #620]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b9a      	ldr	r3, [pc, #616]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012b6:	499b      	ldr	r1, [pc, #620]	; (8001524 <HAL_RCC_OscConfig+0x33c>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4b98      	ldr	r3, [pc, #608]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b97      	ldr	r3, [pc, #604]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012c2:	4999      	ldr	r1, [pc, #612]	; (8001528 <HAL_RCC_OscConfig+0x340>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d014      	beq.n	80012fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fabe 	bl	8000850 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fab9 	bl	8000850 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e2fd      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ec:	4b8c      	ldr	r3, [pc, #560]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	029b      	lsls	r3, r3, #10
 80012f4:	4013      	ands	r3, r2
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0xf2>
 80012f8:	e015      	b.n	8001326 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff faa9 	bl	8000850 <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff faa4 	bl	8000850 <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e2e8      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b82      	ldr	r3, [pc, #520]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2380      	movs	r3, #128	; 0x80
 800131c:	029b      	lsls	r3, r3, #10
 800131e:	4013      	ands	r3, r2
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x11c>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2202      	movs	r2, #2
 800132c:	4013      	ands	r3, r2
 800132e:	d100      	bne.n	8001332 <HAL_RCC_OscConfig+0x14a>
 8001330:	e06c      	b.n	800140c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001332:	4b7b      	ldr	r3, [pc, #492]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	220c      	movs	r2, #12
 8001338:	4013      	ands	r3, r2
 800133a:	d00e      	beq.n	800135a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800133c:	4b78      	ldr	r3, [pc, #480]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	220c      	movs	r2, #12
 8001342:	4013      	ands	r3, r2
 8001344:	2b08      	cmp	r3, #8
 8001346:	d11f      	bne.n	8001388 <HAL_RCC_OscConfig+0x1a0>
 8001348:	4b75      	ldr	r3, [pc, #468]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	23c0      	movs	r3, #192	; 0xc0
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	401a      	ands	r2, r3
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	429a      	cmp	r2, r3
 8001358:	d116      	bne.n	8001388 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	4b71      	ldr	r3, [pc, #452]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	d005      	beq.n	8001370 <HAL_RCC_OscConfig+0x188>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d001      	beq.n	8001370 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e2bb      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b6b      	ldr	r3, [pc, #428]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	22f8      	movs	r2, #248	; 0xf8
 8001376:	4393      	bics	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	00da      	lsls	r2, r3, #3
 8001380:	4b67      	ldr	r3, [pc, #412]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001382:	430a      	orrs	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	e041      	b.n	800140c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d024      	beq.n	80013da <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001390:	4b63      	ldr	r3, [pc, #396]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b62      	ldr	r3, [pc, #392]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fa58 	bl	8000850 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a6:	f7ff fa53 	bl	8000850 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e297      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	4b59      	ldr	r3, [pc, #356]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2202      	movs	r2, #2
 80013be:	4013      	ands	r3, r2
 80013c0:	d0f1      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b57      	ldr	r3, [pc, #348]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	22f8      	movs	r2, #248	; 0xf8
 80013c8:	4393      	bics	r3, r2
 80013ca:	0019      	movs	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	00da      	lsls	r2, r3, #3
 80013d2:	4b53      	ldr	r3, [pc, #332]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e018      	b.n	800140c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013da:	4b51      	ldr	r3, [pc, #324]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b50      	ldr	r3, [pc, #320]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	438a      	bics	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff fa33 	bl	8000850 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f0:	f7ff fa2e 	bl	8000850 <HAL_GetTick>
 80013f4:	0002      	movs	r2, r0
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e272      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	4b47      	ldr	r3, [pc, #284]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2202      	movs	r2, #2
 8001408:	4013      	ands	r3, r2
 800140a:	d1f1      	bne.n	80013f0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2208      	movs	r2, #8
 8001412:	4013      	ands	r3, r2
 8001414:	d036      	beq.n	8001484 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b40      	ldr	r3, [pc, #256]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800142a:	f7ff fa11 	bl	8000850 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fa0c 	bl	8000850 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e250      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b36      	ldr	r3, [pc, #216]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144a:	2202      	movs	r2, #2
 800144c:	4013      	ands	r3, r2
 800144e:	d0f1      	beq.n	8001434 <HAL_RCC_OscConfig+0x24c>
 8001450:	e018      	b.n	8001484 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001456:	4b32      	ldr	r3, [pc, #200]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001458:	2101      	movs	r1, #1
 800145a:	438a      	bics	r2, r1
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff f9f7 	bl	8000850 <HAL_GetTick>
 8001462:	0003      	movs	r3, r0
 8001464:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001468:	f7ff f9f2 	bl	8000850 <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b02      	cmp	r3, #2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e236      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147a:	4b29      	ldr	r3, [pc, #164]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d1f1      	bne.n	8001468 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2204      	movs	r2, #4
 800148a:	4013      	ands	r3, r2
 800148c:	d100      	bne.n	8001490 <HAL_RCC_OscConfig+0x2a8>
 800148e:	e0b5      	b.n	80015fc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001490:	231f      	movs	r3, #31
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001498:	4b21      	ldr	r3, [pc, #132]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	055b      	lsls	r3, r3, #21
 80014a0:	4013      	ands	r3, r2
 80014a2:	d111      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80014a6:	69da      	ldr	r2, [r3, #28]
 80014a8:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	0549      	lsls	r1, r1, #21
 80014ae:	430a      	orrs	r2, r1
 80014b0:	61da      	str	r2, [r3, #28]
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 80014b4:	69da      	ldr	r2, [r3, #28]
 80014b6:	2380      	movs	r3, #128	; 0x80
 80014b8:	055b      	lsls	r3, r3, #21
 80014ba:	4013      	ands	r3, r2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014c0:	231f      	movs	r3, #31
 80014c2:	18fb      	adds	r3, r7, r3
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_OscConfig+0x344>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4013      	ands	r3, r2
 80014d2:	d11a      	bne.n	800150a <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_RCC_OscConfig+0x344>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_RCC_OscConfig+0x344>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0049      	lsls	r1, r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff f9b5 	bl	8000850 <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ec:	f7ff f9b0 	bl	8000850 <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b64      	cmp	r3, #100	; 0x64
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e1f4      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_RCC_OscConfig+0x344>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	2380      	movs	r3, #128	; 0x80
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4013      	ands	r3, r2
 8001508:	d0f0      	beq.n	80014ec <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10e      	bne.n	8001530 <HAL_RCC_OscConfig+0x348>
 8001512:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_RCC_OscConfig+0x338>)
 8001518:	2101      	movs	r1, #1
 800151a:	430a      	orrs	r2, r1
 800151c:	621a      	str	r2, [r3, #32]
 800151e:	e035      	b.n	800158c <HAL_RCC_OscConfig+0x3a4>
 8001520:	40021000 	.word	0x40021000
 8001524:	fffeffff 	.word	0xfffeffff
 8001528:	fffbffff 	.word	0xfffbffff
 800152c:	40007000 	.word	0x40007000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10c      	bne.n	8001552 <HAL_RCC_OscConfig+0x36a>
 8001538:	4bca      	ldr	r3, [pc, #808]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	4bc9      	ldr	r3, [pc, #804]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	621a      	str	r2, [r3, #32]
 8001544:	4bc7      	ldr	r3, [pc, #796]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001546:	6a1a      	ldr	r2, [r3, #32]
 8001548:	4bc6      	ldr	r3, [pc, #792]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800154a:	2104      	movs	r1, #4
 800154c:	438a      	bics	r2, r1
 800154e:	621a      	str	r2, [r3, #32]
 8001550:	e01c      	b.n	800158c <HAL_RCC_OscConfig+0x3a4>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d10c      	bne.n	8001574 <HAL_RCC_OscConfig+0x38c>
 800155a:	4bc2      	ldr	r3, [pc, #776]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800155c:	6a1a      	ldr	r2, [r3, #32]
 800155e:	4bc1      	ldr	r3, [pc, #772]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001560:	2104      	movs	r1, #4
 8001562:	430a      	orrs	r2, r1
 8001564:	621a      	str	r2, [r3, #32]
 8001566:	4bbf      	ldr	r3, [pc, #764]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001568:	6a1a      	ldr	r2, [r3, #32]
 800156a:	4bbe      	ldr	r3, [pc, #760]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800156c:	2101      	movs	r1, #1
 800156e:	430a      	orrs	r2, r1
 8001570:	621a      	str	r2, [r3, #32]
 8001572:	e00b      	b.n	800158c <HAL_RCC_OscConfig+0x3a4>
 8001574:	4bbb      	ldr	r3, [pc, #748]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001576:	6a1a      	ldr	r2, [r3, #32]
 8001578:	4bba      	ldr	r3, [pc, #744]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800157a:	2101      	movs	r1, #1
 800157c:	438a      	bics	r2, r1
 800157e:	621a      	str	r2, [r3, #32]
 8001580:	4bb8      	ldr	r3, [pc, #736]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	4bb7      	ldr	r3, [pc, #732]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001586:	2104      	movs	r1, #4
 8001588:	438a      	bics	r2, r1
 800158a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d014      	beq.n	80015be <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff f95c 	bl	8000850 <HAL_GetTick>
 8001598:	0003      	movs	r3, r0
 800159a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	e009      	b.n	80015b2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff f957 	bl	8000850 <HAL_GetTick>
 80015a2:	0002      	movs	r2, r0
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	4aaf      	ldr	r2, [pc, #700]	; (8001868 <HAL_RCC_OscConfig+0x680>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e19a      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b2:	4bac      	ldr	r3, [pc, #688]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	2202      	movs	r2, #2
 80015b8:	4013      	ands	r3, r2
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x3b6>
 80015bc:	e013      	b.n	80015e6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015be:	f7ff f947 	bl	8000850 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c6:	e009      	b.n	80015dc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c8:	f7ff f942 	bl	8000850 <HAL_GetTick>
 80015cc:	0002      	movs	r2, r0
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	4aa5      	ldr	r2, [pc, #660]	; (8001868 <HAL_RCC_OscConfig+0x680>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e185      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015dc:	4ba1      	ldr	r3, [pc, #644]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015e6:	231f      	movs	r3, #31
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4b9c      	ldr	r3, [pc, #624]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	4b9b      	ldr	r3, [pc, #620]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	499d      	ldr	r1, [pc, #628]	; (800186c <HAL_RCC_OscConfig+0x684>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2210      	movs	r2, #16
 8001602:	4013      	ands	r3, r2
 8001604:	d063      	beq.n	80016ce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d12a      	bne.n	8001664 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800160e:	4b95      	ldr	r3, [pc, #596]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001612:	4b94      	ldr	r3, [pc, #592]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001614:	2104      	movs	r1, #4
 8001616:	430a      	orrs	r2, r1
 8001618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800161a:	4b92      	ldr	r3, [pc, #584]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800161c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161e:	4b91      	ldr	r3, [pc, #580]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001626:	f7ff f913 	bl	8000850 <HAL_GetTick>
 800162a:	0003      	movs	r3, r0
 800162c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001630:	f7ff f90e 	bl	8000850 <HAL_GetTick>
 8001634:	0002      	movs	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e152      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001642:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001646:	2202      	movs	r2, #2
 8001648:	4013      	ands	r3, r2
 800164a:	d0f1      	beq.n	8001630 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800164c:	4b85      	ldr	r3, [pc, #532]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	22f8      	movs	r2, #248	; 0xf8
 8001652:	4393      	bics	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	00da      	lsls	r2, r3, #3
 800165c:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800165e:	430a      	orrs	r2, r1
 8001660:	635a      	str	r2, [r3, #52]	; 0x34
 8001662:	e034      	b.n	80016ce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	3305      	adds	r3, #5
 800166a:	d111      	bne.n	8001690 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800166c:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800166e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001670:	4b7c      	ldr	r3, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001672:	2104      	movs	r1, #4
 8001674:	438a      	bics	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001678:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	22f8      	movs	r2, #248	; 0xf8
 800167e:	4393      	bics	r3, r2
 8001680:	0019      	movs	r1, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	699b      	ldr	r3, [r3, #24]
 8001686:	00da      	lsls	r2, r3, #3
 8001688:	4b76      	ldr	r3, [pc, #472]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800168a:	430a      	orrs	r2, r1
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
 800168e:	e01e      	b.n	80016ce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001690:	4b74      	ldr	r3, [pc, #464]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001694:	4b73      	ldr	r3, [pc, #460]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001696:	2104      	movs	r1, #4
 8001698:	430a      	orrs	r2, r1
 800169a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800169c:	4b71      	ldr	r3, [pc, #452]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800169e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	438a      	bics	r2, r1
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016a8:	f7ff f8d2 	bl	8000850 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016b2:	f7ff f8cd 	bl	8000850 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e111      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016c4:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80016c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d1f1      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2220      	movs	r2, #32
 80016d4:	4013      	ands	r3, r2
 80016d6:	d05c      	beq.n	8001792 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016d8:	4b62      	ldr	r3, [pc, #392]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	220c      	movs	r2, #12
 80016de:	4013      	ands	r3, r2
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d00e      	beq.n	8001702 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016e4:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	220c      	movs	r2, #12
 80016ea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d114      	bne.n	800171a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80016f0:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	23c0      	movs	r3, #192	; 0xc0
 80016f6:	025b      	lsls	r3, r3, #9
 80016f8:	401a      	ands	r2, r3
 80016fa:	23c0      	movs	r3, #192	; 0xc0
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10b      	bne.n	800171a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001702:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	d040      	beq.n	8001790 <HAL_RCC_OscConfig+0x5a8>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d03c      	beq.n	8001790 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e0e6      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01b      	beq.n	800175a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001722:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001726:	4b4f      	ldr	r3, [pc, #316]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	0249      	lsls	r1, r1, #9
 800172c:	430a      	orrs	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff f88e 	bl	8000850 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173a:	f7ff f889 	bl	8000850 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0cd      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800174c:	4b45      	ldr	r3, [pc, #276]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	025b      	lsls	r3, r3, #9
 8001754:	4013      	ands	r3, r2
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x552>
 8001758:	e01b      	b.n	8001792 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800175a:	4b42      	ldr	r3, [pc, #264]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800175c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001760:	4943      	ldr	r1, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x688>)
 8001762:	400a      	ands	r2, r1
 8001764:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff f873 	bl	8000850 <HAL_GetTick>
 800176a:	0003      	movs	r3, r0
 800176c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001770:	f7ff f86e 	bl	8000850 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e0b2      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x588>
 800178e:	e000      	b.n	8001792 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001790:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b00      	cmp	r3, #0
 8001798:	d100      	bne.n	800179c <HAL_RCC_OscConfig+0x5b4>
 800179a:	e0a4      	b.n	80018e6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179c:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	220c      	movs	r2, #12
 80017a2:	4013      	ands	r3, r2
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d100      	bne.n	80017aa <HAL_RCC_OscConfig+0x5c2>
 80017a8:	e078      	b.n	800189c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d14c      	bne.n	800184c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017b8:	492e      	ldr	r1, [pc, #184]	; (8001874 <HAL_RCC_OscConfig+0x68c>)
 80017ba:	400a      	ands	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff f847 	bl	8000850 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c8:	f7ff f842 	bl	8000850 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e086      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	4b22      	ldr	r3, [pc, #136]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	049b      	lsls	r3, r3, #18
 80017e2:	4013      	ands	r3, r2
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	220f      	movs	r2, #15
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80017fa:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_RCC_OscConfig+0x690>)
 8001800:	4013      	ands	r3, r2
 8001802:	0019      	movs	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	431a      	orrs	r2, r3
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001814:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800181a:	2180      	movs	r1, #128	; 0x80
 800181c:	0449      	lsls	r1, r1, #17
 800181e:	430a      	orrs	r2, r1
 8001820:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff f815 	bl	8000850 <HAL_GetTick>
 8001826:	0003      	movs	r3, r0
 8001828:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182c:	f7ff f810 	bl	8000850 <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e054      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	049b      	lsls	r3, r3, #18
 8001846:	4013      	ands	r3, r2
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x644>
 800184a:	e04c      	b.n	80018e6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <HAL_RCC_OscConfig+0x67c>)
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <HAL_RCC_OscConfig+0x68c>)
 8001854:	400a      	ands	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7fe fffa 	bl	8000850 <HAL_GetTick>
 800185c:	0003      	movs	r3, r0
 800185e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	e015      	b.n	800188e <HAL_RCC_OscConfig+0x6a6>
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	40021000 	.word	0x40021000
 8001868:	00001388 	.word	0x00001388
 800186c:	efffffff 	.word	0xefffffff
 8001870:	fffeffff 	.word	0xfffeffff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7fe ffe8 	bl	8000850 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e02c      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_RCC_OscConfig+0x708>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	049b      	lsls	r3, r3, #18
 8001896:	4013      	ands	r3, r2
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x694>
 800189a:	e024      	b.n	80018e6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e01f      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_RCC_OscConfig+0x708>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_RCC_OscConfig+0x708>)
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	23c0      	movs	r3, #192	; 0xc0
 80018b8:	025b      	lsls	r3, r3, #9
 80018ba:	401a      	ands	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d10e      	bne.n	80018e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	220f      	movs	r2, #15
 80018c8:	401a      	ands	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d107      	bne.n	80018e2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	23f0      	movs	r3, #240	; 0xf0
 80018d6:	039b      	lsls	r3, r3, #14
 80018d8:	401a      	ands	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b008      	add	sp, #32
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0bf      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d911      	bls.n	800193a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4393      	bics	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	4b5b      	ldr	r3, [pc, #364]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0a6      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2202      	movs	r2, #2
 8001940:	4013      	ands	r3, r2
 8001942:	d015      	beq.n	8001970 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2204      	movs	r2, #4
 800194a:	4013      	ands	r3, r2
 800194c:	d006      	beq.n	800195c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	21e0      	movs	r1, #224	; 0xe0
 8001956:	00c9      	lsls	r1, r1, #3
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b4d      	ldr	r3, [pc, #308]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	22f0      	movs	r2, #240	; 0xf0
 8001962:	4393      	bics	r3, r2
 8001964:	0019      	movs	r1, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d04c      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	029b      	lsls	r3, r3, #10
 800198a:	4013      	ands	r3, r2
 800198c:	d120      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07a      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800199a:	4b3e      	ldr	r3, [pc, #248]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	049b      	lsls	r3, r3, #18
 80019a2:	4013      	ands	r3, r2
 80019a4:	d114      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06e      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b03      	cmp	r3, #3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	4013      	ands	r3, r2
 80019bc:	d108      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e062      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2202      	movs	r2, #2
 80019c8:	4013      	ands	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e05b      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2203      	movs	r2, #3
 80019d6:	4393      	bics	r3, r2
 80019d8:	0019      	movs	r1, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 80019e0:	430a      	orrs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019e4:	f7fe ff34 	bl	8000850 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ec:	e009      	b.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ee:	f7fe ff2f 	bl	8000850 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_RCC_ClockConfig+0x1a4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e042      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	220c      	movs	r2, #12
 8001a08:	401a      	ands	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d1ec      	bne.n	80019ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d211      	bcs.n	8001a46 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2201      	movs	r2, #1
 8001a28:	4393      	bics	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x19c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d001      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e020      	b.n	8001a88 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d009      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_RCC_ClockConfig+0x1a8>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a64:	f000 f820 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8001a68:	0001      	movs	r1, r0
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1a0>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	220f      	movs	r2, #15
 8001a72:	4013      	ands	r3, r2
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_RCC_ClockConfig+0x1ac>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	000a      	movs	r2, r1
 8001a7a:	40da      	lsrs	r2, r3
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_ClockConfig+0x1b0>)
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7fe fe9f 	bl	80007c4 <HAL_InitTick>
  
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b004      	add	sp, #16
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	00001388 	.word	0x00001388
 8001a9c:	fffff8ff 	.word	0xfffff8ff
 8001aa0:	08002cd8 	.word	0x08002cd8
 8001aa4:	20000034 	.word	0x20000034

08001aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b08f      	sub	sp, #60	; 0x3c
 8001aac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001aae:	2314      	movs	r3, #20
 8001ab0:	18fb      	adds	r3, r7, r3
 8001ab2:	4a37      	ldr	r2, [pc, #220]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ab4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ab6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	4a35      	ldr	r2, [pc, #212]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xec>)
 8001ac0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ac2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001adc:	4b2e      	ldr	r3, [pc, #184]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae4:	220c      	movs	r2, #12
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d006      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x52>
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d043      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0xd0>
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d144      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001af4:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001af8:	e044      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	220f      	movs	r2, #15
 8001b00:	4013      	ands	r3, r2
 8001b02:	2214      	movs	r2, #20
 8001b04:	18ba      	adds	r2, r7, r2
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b0a:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0e:	220f      	movs	r2, #15
 8001b10:	4013      	ands	r3, r2
 8001b12:	1d3a      	adds	r2, r7, #4
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	025b      	lsls	r3, r3, #9
 8001b1e:	401a      	ands	r2, r3
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	025b      	lsls	r3, r3, #9
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d109      	bne.n	8001b3c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2a:	481c      	ldr	r0, [pc, #112]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b2c:	f7fe faec 	bl	8000108 <__udivsi3>
 8001b30:	0003      	movs	r3, r0
 8001b32:	001a      	movs	r2, r3
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	4353      	muls	r3, r2
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3a:	e01a      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3e:	23c0      	movs	r3, #192	; 0xc0
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	401a      	ands	r2, r3
 8001b44:	23c0      	movs	r3, #192	; 0xc0
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b4e:	4814      	ldr	r0, [pc, #80]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b50:	f7fe fada 	bl	8000108 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	001a      	movs	r2, r3
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	4353      	muls	r3, r2
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b64:	f7fe fad0 	bl	8000108 <__udivsi3>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	4353      	muls	r3, r2
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b76:	e005      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b7c:	e002      	b.n	8001b84 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xf4>)
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b82:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b00f      	add	sp, #60	; 0x3c
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	46c0      	nop			; (mov r8, r8)
 8001b90:	08002cb8 	.word	0x08002cb8
 8001b94:	08002cc8 	.word	0x08002cc8
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	007a1200 	.word	0x007a1200
 8001ba0:	02dc6c00 	.word	0x02dc6c00

08001ba4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	20000034 	.word	0x20000034

08001bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bbc:	f7ff fff2 	bl	8001ba4 <HAL_RCC_GetHCLKFreq>
 8001bc0:	0001      	movs	r1, r0
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	2207      	movs	r2, #7
 8001bca:	4013      	ands	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	40d9      	lsrs	r1, r3
 8001bd2:	000b      	movs	r3, r1
}    
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	08002ce8 	.word	0x08002ce8

08001be4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e044      	b.n	8001c80 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2274      	movs	r2, #116	; 0x74
 8001c02:	2100      	movs	r1, #0
 8001c04:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7fe fcb7 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2224      	movs	r2, #36	; 0x24
 8001c12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2101      	movs	r1, #1
 8001c20:	438a      	bics	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f000 fb3e 	bl	80022a8 <UART_SetConfig>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d101      	bne.n	8001c36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e024      	b.n	8001c80 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	0018      	movs	r0, r3
 8001c42:	f000 fcb5 	bl	80025b0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	490d      	ldr	r1, [pc, #52]	; (8001c88 <HAL_UART_Init+0xa4>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	212a      	movs	r1, #42	; 0x2a
 8001c62:	438a      	bics	r2, r1
 8001c64:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2101      	movs	r1, #1
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fd4d 	bl	8002718 <UART_CheckIdleState>
 8001c7e:	0003      	movs	r3, r0
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	ffffb7ff 	.word	0xffffb7ff

08001c8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	1dbb      	adds	r3, r7, #6
 8001c98:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d000      	beq.n	8001ca4 <HAL_UART_Transmit_DMA+0x18>
 8001ca2:	e079      	b.n	8001d98 <HAL_UART_Transmit_DMA+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_UART_Transmit_DMA+0x26>
 8001caa:	1dbb      	adds	r3, r7, #6
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e071      	b.n	8001d9a <HAL_UART_Transmit_DMA+0x10e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	015b      	lsls	r3, r3, #5
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d109      	bne.n	8001cd6 <HAL_UART_Transmit_DMA+0x4a>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d001      	beq.n	8001cd6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e061      	b.n	8001d9a <HAL_UART_Transmit_DMA+0x10e>
      }
    }

    __HAL_LOCK(huart);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2274      	movs	r2, #116	; 0x74
 8001cda:	5c9b      	ldrb	r3, [r3, r2]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_UART_Transmit_DMA+0x58>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	e05a      	b.n	8001d9a <HAL_UART_Transmit_DMA+0x10e>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2274      	movs	r2, #116	; 0x74
 8001ce8:	2101      	movs	r1, #1
 8001cea:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1dba      	adds	r2, r7, #6
 8001cf6:	2150      	movs	r1, #80	; 0x50
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1dba      	adds	r2, r7, #6
 8001d00:	2152      	movs	r1, #82	; 0x52
 8001d02:	8812      	ldrh	r2, [r2, #0]
 8001d04:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2280      	movs	r2, #128	; 0x80
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	; 0x21
 8001d12:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d02b      	beq.n	8001d74 <HAL_UART_Transmit_DMA+0xe8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d20:	4a20      	ldr	r2, [pc, #128]	; (8001da4 <HAL_UART_Transmit_DMA+0x118>)
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_UART_Transmit_DMA+0x11c>)
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d30:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_UART_Transmit_DMA+0x120>)
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	0019      	movs	r1, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	001a      	movs	r2, r3
 8001d4e:	1dbb      	adds	r3, r7, #6
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	f7fe fead 	bl	8000ab0 <HAL_DMA_Start_IT>
 8001d56:	1e03      	subs	r3, r0, #0
 8001d58:	d00c      	beq.n	8001d74 <HAL_UART_Transmit_DMA+0xe8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	2110      	movs	r1, #16
 8001d60:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2274      	movs	r2, #116	; 0x74
 8001d66:	2100      	movs	r1, #0
 8001d68:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e012      	b.n	8001d9a <HAL_UART_Transmit_DMA+0x10e>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2240      	movs	r2, #64	; 0x40
 8001d7a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2274      	movs	r2, #116	; 0x74
 8001d80:	2100      	movs	r1, #0
 8001d82:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	430a      	orrs	r2, r1
 8001d92:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	e000      	b.n	8001d9a <HAL_UART_Transmit_DMA+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d98:	2302      	movs	r3, #2
  }
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	08002a0d 	.word	0x08002a0d
 8001da8:	08002a5d 	.word	0x08002a5d
 8001dac:	08002b55 	.word	0x08002b55

08001db0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	1dbb      	adds	r3, r7, #6
 8001dbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d13f      	bne.n	8001e46 <HAL_UART_Receive_DMA+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_UART_Receive_DMA+0x24>
 8001dcc:	1dbb      	adds	r3, r7, #6
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e037      	b.n	8001e48 <HAL_UART_Receive_DMA+0x98>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	015b      	lsls	r3, r3, #5
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_UART_Receive_DMA+0x48>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2201      	movs	r2, #1
 8001df0:	4013      	ands	r3, r2
 8001df2:	d001      	beq.n	8001df8 <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e027      	b.n	8001e48 <HAL_UART_Receive_DMA+0x98>
      }
    }

    __HAL_LOCK(huart);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2274      	movs	r2, #116	; 0x74
 8001dfc:	5c9b      	ldrb	r3, [r3, r2]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_UART_Receive_DMA+0x56>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e020      	b.n	8001e48 <HAL_UART_Receive_DMA+0x98>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2274      	movs	r2, #116	; 0x74
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	041b      	lsls	r3, r3, #16
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d008      	beq.n	8001e34 <HAL_UART_Receive_DMA+0x84>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	04c9      	lsls	r1, r1, #19
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	881a      	ldrh	r2, [r3, #0]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 fd33 	bl	80028a8 <UART_Start_Receive_DMA>
 8001e42:	0003      	movs	r3, r0
 8001e44:	e000      	b.n	8001e48 <HAL_UART_Receive_DMA+0x98>
  }
  else
  {
    return HAL_BUSY;
 8001e46:	2302      	movs	r3, #2
  }
}
 8001e48:	0018      	movs	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b004      	add	sp, #16
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	4ab5      	ldr	r2, [pc, #724]	; (8002148 <HAL_UART_IRQHandler+0x2f8>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d112      	bne.n	8001ea4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	2220      	movs	r2, #32
 8001e82:	4013      	ands	r3, r2
 8001e84:	d00e      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d100      	bne.n	8001e98 <HAL_UART_IRQHandler+0x48>
 8001e96:	e1d4      	b.n	8002242 <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	0010      	movs	r0, r2
 8001ea0:	4798      	blx	r3
      }
      return;
 8001ea2:	e1ce      	b.n	8002242 <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d100      	bne.n	8001eac <HAL_UART_IRQHandler+0x5c>
 8001eaa:	e0d9      	b.n	8002060 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d104      	bne.n	8001ebe <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	4aa5      	ldr	r2, [pc, #660]	; (800214c <HAL_UART_IRQHandler+0x2fc>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d100      	bne.n	8001ebe <HAL_UART_IRQHandler+0x6e>
 8001ebc:	e0d0      	b.n	8002060 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d010      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x98>
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d00b      	beq.n	8001ee8 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2280      	movs	r2, #128	; 0x80
 8001edc:	589b      	ldr	r3, [r3, r2]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d00f      	beq.n	8001f10 <HAL_UART_IRQHandler+0xc0>
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d00b      	beq.n	8001f10 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2202      	movs	r2, #2
 8001efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2280      	movs	r2, #128	; 0x80
 8001f04:	589b      	ldr	r3, [r3, r2]
 8001f06:	2204      	movs	r2, #4
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d00f      	beq.n	8001f38 <HAL_UART_IRQHandler+0xe8>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d00b      	beq.n	8001f38 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	; 0x80
 8001f2c:	589b      	ldr	r3, [r3, r2]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2208      	movs	r2, #8
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2220      	movs	r2, #32
 8001f44:	4013      	ands	r3, r2
 8001f46:	d103      	bne.n	8001f50 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001f4e:	d00b      	beq.n	8001f68 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2208      	movs	r2, #8
 8001f56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	589b      	ldr	r3, [r3, r2]
 8001f5e:	2208      	movs	r2, #8
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d011      	beq.n	8001f96 <HAL_UART_IRQHandler+0x146>
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	04db      	lsls	r3, r3, #19
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d00c      	beq.n	8001f96 <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	0112      	lsls	r2, r2, #4
 8001f84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2280      	movs	r2, #128	; 0x80
 8001f9a:	589b      	ldr	r3, [r3, r2]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d100      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x152>
 8001fa0:	e151      	b.n	8002246 <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	2220      	movs	r2, #32
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d008      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	589b      	ldr	r3, [r3, r2]
 8001fca:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2240      	movs	r2, #64	; 0x40
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b40      	cmp	r3, #64	; 0x40
 8001fd8:	d003      	beq.n	8001fe2 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2228      	movs	r2, #40	; 0x28
 8001fde:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001fe0:	d033      	beq.n	800204a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 fce1 	bl	80029ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b40      	cmp	r3, #64	; 0x40
 8001ff6:	d123      	bne.n	8002040 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2140      	movs	r1, #64	; 0x40
 8002004:	438a      	bics	r2, r1
 8002006:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	2b00      	cmp	r3, #0
 800200e:	d012      	beq.n	8002036 <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a4e      	ldr	r2, [pc, #312]	; (8002150 <HAL_UART_IRQHandler+0x300>)
 8002016:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	0018      	movs	r0, r3
 800201e:	f7fe fde5 	bl	8000bec <HAL_DMA_Abort_IT>
 8002022:	1e03      	subs	r3, r0, #0
 8002024:	d01a      	beq.n	800205c <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	0018      	movs	r0, r3
 8002032:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002034:	e012      	b.n	800205c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f921 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800203e:	e00d      	b.n	800205c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0018      	movs	r0, r3
 8002044:	f000 f91c 	bl	8002280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	e008      	b.n	800205c <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	0018      	movs	r0, r3
 800204e:	f000 f917 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	2100      	movs	r1, #0
 8002058:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800205a:	e0f4      	b.n	8002246 <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800205c:	46c0      	nop			; (mov r8, r8)
    return;
 800205e:	e0f2      	b.n	8002246 <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002064:	2b01      	cmp	r3, #1
 8002066:	d000      	beq.n	800206a <HAL_UART_IRQHandler+0x21a>
 8002068:	e0b7      	b.n	80021da <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2210      	movs	r2, #16
 800206e:	4013      	ands	r3, r2
 8002070:	d100      	bne.n	8002074 <HAL_UART_IRQHandler+0x224>
 8002072:	e0b2      	b.n	80021da <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2210      	movs	r2, #16
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_UART_IRQHandler+0x22e>
 800207c:	e0ad      	b.n	80021da <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2210      	movs	r2, #16
 8002084:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	4013      	ands	r3, r2
 8002090:	2b40      	cmp	r3, #64	; 0x40
 8002092:	d161      	bne.n	8002158 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	2108      	movs	r1, #8
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <HAL_UART_IRQHandler+0x25c>
 80020aa:	e0ce      	b.n	800224a <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2258      	movs	r2, #88	; 0x58
 80020b0:	5a9b      	ldrh	r3, [r3, r2]
 80020b2:	2208      	movs	r2, #8
 80020b4:	18ba      	adds	r2, r7, r2
 80020b6:	8812      	ldrh	r2, [r2, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d300      	bcc.n	80020be <HAL_UART_IRQHandler+0x26e>
 80020bc:	e0c5      	b.n	800224a <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2208      	movs	r2, #8
 80020c2:	18ba      	adds	r2, r7, r2
 80020c4:	215a      	movs	r1, #90	; 0x5a
 80020c6:	8812      	ldrh	r2, [r2, #0]
 80020c8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	2b20      	cmp	r3, #32
 80020d2:	d02a      	beq.n	800212a <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	491d      	ldr	r1, [pc, #116]	; (8002154 <HAL_UART_IRQHandler+0x304>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2101      	movs	r1, #1
 80020f0:	438a      	bics	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2140      	movs	r1, #64	; 0x40
 8002100:	438a      	bics	r2, r1
 8002102:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2110      	movs	r1, #16
 800211c:	438a      	bics	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002124:	0018      	movs	r0, r3
 8002126:	f7fe fd29 	bl	8000b7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2258      	movs	r2, #88	; 0x58
 800212e:	5a9a      	ldrh	r2, [r3, r2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	215a      	movs	r1, #90	; 0x5a
 8002134:	5a5b      	ldrh	r3, [r3, r1]
 8002136:	b29b      	uxth	r3, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	b29a      	uxth	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	0011      	movs	r1, r2
 8002140:	0018      	movs	r0, r3
 8002142:	f000 f8a5 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002146:	e080      	b.n	800224a <HAL_UART_IRQHandler+0x3fa>
 8002148:	0000080f 	.word	0x0000080f
 800214c:	04000120 	.word	0x04000120
 8002150:	08002bd7 	.word	0x08002bd7
 8002154:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2258      	movs	r2, #88	; 0x58
 800215c:	5a99      	ldrh	r1, [r3, r2]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	225a      	movs	r2, #90	; 0x5a
 8002162:	5a9b      	ldrh	r3, [r3, r2]
 8002164:	b29a      	uxth	r2, r3
 8002166:	230a      	movs	r3, #10
 8002168:	18fb      	adds	r3, r7, r3
 800216a:	1a8a      	subs	r2, r1, r2
 800216c:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	225a      	movs	r2, #90	; 0x5a
 8002172:	5a9b      	ldrh	r3, [r3, r2]
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <HAL_UART_IRQHandler+0x32c>
 800217a:	e068      	b.n	800224e <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 800217c:	230a      	movs	r3, #10
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d063      	beq.n	800224e <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4932      	ldr	r1, [pc, #200]	; (800225c <HAL_UART_IRQHandler+0x40c>)
 8002192:	400a      	ands	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2101      	movs	r1, #1
 80021a2:	438a      	bics	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2220      	movs	r2, #32
 80021aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2110      	movs	r1, #16
 80021c4:	438a      	bics	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80021c8:	230a      	movs	r3, #10
 80021ca:	18fb      	adds	r3, r7, r3
 80021cc:	881a      	ldrh	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	0011      	movs	r1, r2
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 f85c 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80021d8:	e039      	b.n	800224e <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	035b      	lsls	r3, r3, #13
 80021e0:	4013      	ands	r3, r2
 80021e2:	d00e      	beq.n	8002202 <HAL_UART_IRQHandler+0x3b2>
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	03db      	lsls	r3, r3, #15
 80021ea:	4013      	ands	r3, r2
 80021ec:	d009      	beq.n	8002202 <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	0352      	lsls	r2, r2, #13
 80021f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f000 fd1c 	bl	8002c38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002200:	e028      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	2280      	movs	r2, #128	; 0x80
 8002206:	4013      	ands	r3, r2
 8002208:	d00d      	beq.n	8002226 <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2280      	movs	r2, #128	; 0x80
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01b      	beq.n	8002252 <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	0010      	movs	r0, r2
 8002222:	4798      	blx	r3
    }
    return;
 8002224:	e015      	b.n	8002252 <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	4013      	ands	r3, r2
 800222c:	d012      	beq.n	8002254 <HAL_UART_IRQHandler+0x404>
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2240      	movs	r2, #64	; 0x40
 8002232:	4013      	ands	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	0018      	movs	r0, r3
 800223a:	f000 fce3 	bl	8002c04 <UART_EndTransmit_IT>
    return;
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	e008      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
      return;
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	e006      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
    return;
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	e004      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
      return;
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	e002      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
      return;
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	e000      	b.n	8002254 <HAL_UART_IRQHandler+0x404>
    return;
 8002252:	46c0      	nop			; (mov r8, r8)
  }

}
 8002254:	46bd      	mov	sp, r7
 8002256:	b008      	add	sp, #32
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	fffffedf 	.word	0xfffffedf

08002260 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002268:	46c0      	nop			; (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	000a      	movs	r2, r1
 800229a:	1cbb      	adds	r3, r7, #2
 800229c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	46bd      	mov	sp, r7
 80022a2:	b002      	add	sp, #8
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022b0:	231e      	movs	r3, #30
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4aac      	ldr	r2, [pc, #688]	; (8002588 <UART_SetConfig+0x2e0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	0019      	movs	r1, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	4aa7      	ldr	r2, [pc, #668]	; (800258c <UART_SetConfig+0x2e4>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	0019      	movs	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a9e      	ldr	r2, [pc, #632]	; (8002590 <UART_SetConfig+0x2e8>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	430a      	orrs	r2, r1
 8002322:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a9a      	ldr	r2, [pc, #616]	; (8002594 <UART_SetConfig+0x2ec>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d125      	bne.n	800237a <UART_SetConfig+0xd2>
 800232e:	4b9a      	ldr	r3, [pc, #616]	; (8002598 <UART_SetConfig+0x2f0>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	2203      	movs	r2, #3
 8002334:	4013      	ands	r3, r2
 8002336:	2b01      	cmp	r3, #1
 8002338:	d00f      	beq.n	800235a <UART_SetConfig+0xb2>
 800233a:	d304      	bcc.n	8002346 <UART_SetConfig+0x9e>
 800233c:	2b02      	cmp	r3, #2
 800233e:	d011      	beq.n	8002364 <UART_SetConfig+0xbc>
 8002340:	2b03      	cmp	r3, #3
 8002342:	d005      	beq.n	8002350 <UART_SetConfig+0xa8>
 8002344:	e013      	b.n	800236e <UART_SetConfig+0xc6>
 8002346:	231f      	movs	r3, #31
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e064      	b.n	800241a <UART_SetConfig+0x172>
 8002350:	231f      	movs	r3, #31
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2202      	movs	r2, #2
 8002356:	701a      	strb	r2, [r3, #0]
 8002358:	e05f      	b.n	800241a <UART_SetConfig+0x172>
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2204      	movs	r2, #4
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	e05a      	b.n	800241a <UART_SetConfig+0x172>
 8002364:	231f      	movs	r3, #31
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	2208      	movs	r2, #8
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	e055      	b.n	800241a <UART_SetConfig+0x172>
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	2210      	movs	r2, #16
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	e04f      	b.n	800241a <UART_SetConfig+0x172>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a87      	ldr	r2, [pc, #540]	; (800259c <UART_SetConfig+0x2f4>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d132      	bne.n	80023ea <UART_SetConfig+0x142>
 8002384:	4b84      	ldr	r3, [pc, #528]	; (8002598 <UART_SetConfig+0x2f0>)
 8002386:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002388:	23c0      	movs	r3, #192	; 0xc0
 800238a:	029b      	lsls	r3, r3, #10
 800238c:	4013      	ands	r3, r2
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	0252      	lsls	r2, r2, #9
 8002392:	4293      	cmp	r3, r2
 8002394:	d019      	beq.n	80023ca <UART_SetConfig+0x122>
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	0252      	lsls	r2, r2, #9
 800239a:	4293      	cmp	r3, r2
 800239c:	d802      	bhi.n	80023a4 <UART_SetConfig+0xfc>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <UART_SetConfig+0x10e>
 80023a2:	e01c      	b.n	80023de <UART_SetConfig+0x136>
 80023a4:	2280      	movs	r2, #128	; 0x80
 80023a6:	0292      	lsls	r2, r2, #10
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d013      	beq.n	80023d4 <UART_SetConfig+0x12c>
 80023ac:	22c0      	movs	r2, #192	; 0xc0
 80023ae:	0292      	lsls	r2, r2, #10
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d005      	beq.n	80023c0 <UART_SetConfig+0x118>
 80023b4:	e013      	b.n	80023de <UART_SetConfig+0x136>
 80023b6:	231f      	movs	r3, #31
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e02c      	b.n	800241a <UART_SetConfig+0x172>
 80023c0:	231f      	movs	r3, #31
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2202      	movs	r2, #2
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	e027      	b.n	800241a <UART_SetConfig+0x172>
 80023ca:	231f      	movs	r3, #31
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e022      	b.n	800241a <UART_SetConfig+0x172>
 80023d4:	231f      	movs	r3, #31
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2208      	movs	r2, #8
 80023da:	701a      	strb	r2, [r3, #0]
 80023dc:	e01d      	b.n	800241a <UART_SetConfig+0x172>
 80023de:	231f      	movs	r3, #31
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2210      	movs	r2, #16
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	e017      	b.n	800241a <UART_SetConfig+0x172>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a6c      	ldr	r2, [pc, #432]	; (80025a0 <UART_SetConfig+0x2f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d104      	bne.n	80023fe <UART_SetConfig+0x156>
 80023f4:	231f      	movs	r3, #31
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
 80023fc:	e00d      	b.n	800241a <UART_SetConfig+0x172>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a68      	ldr	r2, [pc, #416]	; (80025a4 <UART_SetConfig+0x2fc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d104      	bne.n	8002412 <UART_SetConfig+0x16a>
 8002408:	231f      	movs	r3, #31
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e003      	b.n	800241a <UART_SetConfig+0x172>
 8002412:	231f      	movs	r3, #31
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2210      	movs	r2, #16
 8002418:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	021b      	lsls	r3, r3, #8
 8002422:	429a      	cmp	r2, r3
 8002424:	d15c      	bne.n	80024e0 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8002426:	231f      	movs	r3, #31
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d00d      	beq.n	800244c <UART_SetConfig+0x1a4>
 8002430:	dc02      	bgt.n	8002438 <UART_SetConfig+0x190>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <UART_SetConfig+0x19a>
 8002436:	e015      	b.n	8002464 <UART_SetConfig+0x1bc>
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00a      	beq.n	8002452 <UART_SetConfig+0x1aa>
 800243c:	2b08      	cmp	r3, #8
 800243e:	d00d      	beq.n	800245c <UART_SetConfig+0x1b4>
 8002440:	e010      	b.n	8002464 <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002442:	f7ff fbb9 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002446:	0003      	movs	r3, r0
 8002448:	61bb      	str	r3, [r7, #24]
        break;
 800244a:	e012      	b.n	8002472 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800244c:	4b56      	ldr	r3, [pc, #344]	; (80025a8 <UART_SetConfig+0x300>)
 800244e:	61bb      	str	r3, [r7, #24]
        break;
 8002450:	e00f      	b.n	8002472 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002452:	f7ff fb29 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8002456:	0003      	movs	r3, r0
 8002458:	61bb      	str	r3, [r7, #24]
        break;
 800245a:	e00a      	b.n	8002472 <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	61bb      	str	r3, [r7, #24]
        break;
 8002462:	e006      	b.n	8002472 <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002468:	231e      	movs	r3, #30
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
        break;
 8002470:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d100      	bne.n	800247a <UART_SetConfig+0x1d2>
 8002478:	e079      	b.n	800256e <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	005a      	lsls	r2, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	18d2      	adds	r2, r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f7fd fe3b 	bl	8000108 <__udivsi3>
 8002492:	0003      	movs	r3, r0
 8002494:	b29b      	uxth	r3, r3
 8002496:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	d91b      	bls.n	80024d6 <UART_SetConfig+0x22e>
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4a42      	ldr	r2, [pc, #264]	; (80025ac <UART_SetConfig+0x304>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d817      	bhi.n	80024d6 <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	200e      	movs	r0, #14
 80024ac:	183b      	adds	r3, r7, r0
 80024ae:	210f      	movs	r1, #15
 80024b0:	438a      	bics	r2, r1
 80024b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2207      	movs	r2, #7
 80024bc:	4013      	ands	r3, r2
 80024be:	b299      	uxth	r1, r3
 80024c0:	183b      	adds	r3, r7, r0
 80024c2:	183a      	adds	r2, r7, r0
 80024c4:	8812      	ldrh	r2, [r2, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	183a      	adds	r2, r7, r0
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	e04b      	b.n	800256e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 80024d6:	231e      	movs	r3, #30
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e046      	b.n	800256e <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024e0:	231f      	movs	r3, #31
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d00d      	beq.n	8002506 <UART_SetConfig+0x25e>
 80024ea:	dc02      	bgt.n	80024f2 <UART_SetConfig+0x24a>
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <UART_SetConfig+0x254>
 80024f0:	e015      	b.n	800251e <UART_SetConfig+0x276>
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d00a      	beq.n	800250c <UART_SetConfig+0x264>
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d00d      	beq.n	8002516 <UART_SetConfig+0x26e>
 80024fa:	e010      	b.n	800251e <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024fc:	f7ff fb5c 	bl	8001bb8 <HAL_RCC_GetPCLK1Freq>
 8002500:	0003      	movs	r3, r0
 8002502:	61bb      	str	r3, [r7, #24]
        break;
 8002504:	e012      	b.n	800252c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002506:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <UART_SetConfig+0x300>)
 8002508:	61bb      	str	r3, [r7, #24]
        break;
 800250a:	e00f      	b.n	800252c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800250c:	f7ff facc 	bl	8001aa8 <HAL_RCC_GetSysClockFreq>
 8002510:	0003      	movs	r3, r0
 8002512:	61bb      	str	r3, [r7, #24]
        break;
 8002514:	e00a      	b.n	800252c <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	61bb      	str	r3, [r7, #24]
        break;
 800251c:	e006      	b.n	800252c <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002522:	231e      	movs	r3, #30
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
        break;
 800252a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d01d      	beq.n	800256e <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	085a      	lsrs	r2, r3, #1
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	18d2      	adds	r2, r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0019      	movs	r1, r3
 8002542:	0010      	movs	r0, r2
 8002544:	f7fd fde0 	bl	8000108 <__udivsi3>
 8002548:	0003      	movs	r3, r0
 800254a:	b29b      	uxth	r3, r3
 800254c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d908      	bls.n	8002566 <UART_SetConfig+0x2be>
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <UART_SetConfig+0x304>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d804      	bhi.n	8002566 <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	60da      	str	r2, [r3, #12]
 8002564:	e003      	b.n	800256e <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002566:	231e      	movs	r3, #30
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800257a:	231e      	movs	r3, #30
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	781b      	ldrb	r3, [r3, #0]
}
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	b008      	add	sp, #32
 8002586:	bd80      	pop	{r7, pc}
 8002588:	efff69f3 	.word	0xefff69f3
 800258c:	ffffcfff 	.word	0xffffcfff
 8002590:	fffff4ff 	.word	0xfffff4ff
 8002594:	40013800 	.word	0x40013800
 8002598:	40021000 	.word	0x40021000
 800259c:	40004400 	.word	0x40004400
 80025a0:	40004800 	.word	0x40004800
 80025a4:	40004c00 	.word	0x40004c00
 80025a8:	007a1200 	.word	0x007a1200
 80025ac:	0000ffff 	.word	0x0000ffff

080025b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	d00b      	beq.n	80025da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a4a      	ldr	r2, [pc, #296]	; (80026f4 <UART_AdvFeatureConfig+0x144>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	0019      	movs	r1, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2202      	movs	r2, #2
 80025e0:	4013      	ands	r3, r2
 80025e2:	d00b      	beq.n	80025fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a43      	ldr	r2, [pc, #268]	; (80026f8 <UART_AdvFeatureConfig+0x148>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	0019      	movs	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d00b      	beq.n	800261e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a3b      	ldr	r2, [pc, #236]	; (80026fc <UART_AdvFeatureConfig+0x14c>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2208      	movs	r2, #8
 8002624:	4013      	ands	r3, r2
 8002626:	d00b      	beq.n	8002640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4a34      	ldr	r2, [pc, #208]	; (8002700 <UART_AdvFeatureConfig+0x150>)
 8002630:	4013      	ands	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d00b      	beq.n	8002662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4a2c      	ldr	r2, [pc, #176]	; (8002704 <UART_AdvFeatureConfig+0x154>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2220      	movs	r2, #32
 8002668:	4013      	ands	r3, r2
 800266a:	d00b      	beq.n	8002684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4a25      	ldr	r2, [pc, #148]	; (8002708 <UART_AdvFeatureConfig+0x158>)
 8002674:	4013      	ands	r3, r2
 8002676:	0019      	movs	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	2240      	movs	r2, #64	; 0x40
 800268a:	4013      	ands	r3, r2
 800268c:	d01d      	beq.n	80026ca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <UART_AdvFeatureConfig+0x15c>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026aa:	2380      	movs	r3, #128	; 0x80
 80026ac:	035b      	lsls	r3, r3, #13
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10b      	bne.n	80026ca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	4a15      	ldr	r2, [pc, #84]	; (8002710 <UART_AdvFeatureConfig+0x160>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	0019      	movs	r1, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	4013      	ands	r3, r2
 80026d2:	d00b      	beq.n	80026ec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <UART_AdvFeatureConfig+0x164>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
  }
}
 80026ec:	46c0      	nop			; (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b002      	add	sp, #8
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	fffdffff 	.word	0xfffdffff
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	fffbffff 	.word	0xfffbffff
 8002700:	ffff7fff 	.word	0xffff7fff
 8002704:	ffffefff 	.word	0xffffefff
 8002708:	ffffdfff 	.word	0xffffdfff
 800270c:	ffefffff 	.word	0xffefffff
 8002710:	ff9fffff 	.word	0xff9fffff
 8002714:	fff7ffff 	.word	0xfff7ffff

08002718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2280      	movs	r2, #128	; 0x80
 8002724:	2100      	movs	r1, #0
 8002726:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002728:	f7fe f892 	bl	8000850 <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2208      	movs	r2, #8
 8002738:	4013      	ands	r3, r2
 800273a:	2b08      	cmp	r3, #8
 800273c:	d10d      	bne.n	800275a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	0399      	lsls	r1, r3, #14
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4b18      	ldr	r3, [pc, #96]	; (80027a8 <UART_CheckIdleState+0x90>)
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	0013      	movs	r3, r2
 800274c:	2200      	movs	r2, #0
 800274e:	f000 f82d 	bl	80027ac <UART_WaitOnFlagUntilTimeout>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d001      	beq.n	800275a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e022      	b.n	80027a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2204      	movs	r2, #4
 8002762:	4013      	ands	r3, r2
 8002764:	2b04      	cmp	r3, #4
 8002766:	d10d      	bne.n	8002784 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	03d9      	lsls	r1, r3, #15
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <UART_CheckIdleState+0x90>)
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	0013      	movs	r3, r2
 8002776:	2200      	movs	r2, #0
 8002778:	f000 f818 	bl	80027ac <UART_WaitOnFlagUntilTimeout>
 800277c:	1e03      	subs	r3, r0, #0
 800277e:	d001      	beq.n	8002784 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e00d      	b.n	80027a0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2274      	movs	r2, #116	; 0x74
 800279a:	2100      	movs	r1, #0
 800279c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	01ffffff 	.word	0x01ffffff

080027ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	1dfb      	adds	r3, r7, #7
 80027ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027bc:	e05e      	b.n	800287c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	3301      	adds	r3, #1
 80027c2:	d05b      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c4:	f7fe f844 	bl	8000850 <HAL_GetTick>
 80027c8:	0002      	movs	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <UART_WaitOnFlagUntilTimeout+0x2e>
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11b      	bne.n	8002812 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	492f      	ldr	r1, [pc, #188]	; (80028a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	438a      	bics	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2220      	movs	r2, #32
 80027fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2220      	movs	r2, #32
 8002804:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2274      	movs	r2, #116	; 0x74
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e044      	b.n	800289c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2204      	movs	r2, #4
 800281a:	4013      	ands	r3, r2
 800281c:	d02e      	beq.n	800287c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	401a      	ands	r2, r3
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	429a      	cmp	r2, r3
 8002830:	d124      	bne.n	800287c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4917      	ldr	r1, [pc, #92]	; (80028a4 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002848:	400a      	ands	r2, r1
 800284a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2101      	movs	r1, #1
 8002858:	438a      	bics	r2, r1
 800285a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2220      	movs	r2, #32
 8002866:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2280      	movs	r2, #128	; 0x80
 800286c:	2120      	movs	r1, #32
 800286e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2274      	movs	r2, #116	; 0x74
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e00f      	b.n	800289c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	4013      	ands	r3, r2
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	425a      	negs	r2, r3
 800288c:	4153      	adcs	r3, r2
 800288e:	b2db      	uxtb	r3, r3
 8002890:	001a      	movs	r2, r3
 8002892:	1dfb      	adds	r3, r7, #7
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d091      	beq.n	80027be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	fffffe5f 	.word	0xfffffe5f

080028a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	1dbb      	adds	r3, r7, #6
 80028b4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1dba      	adds	r2, r7, #6
 80028c0:	2158      	movs	r1, #88	; 0x58
 80028c2:	8812      	ldrh	r2, [r2, #0]
 80028c4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2280      	movs	r2, #128	; 0x80
 80028ca:	2100      	movs	r1, #0
 80028cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2222      	movs	r2, #34	; 0x22
 80028d2:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d02b      	beq.n	8002934 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <UART_Start_Receive_DMA+0xd0>)
 80028e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a24      	ldr	r2, [pc, #144]	; (800297c <UART_Start_Receive_DMA+0xd4>)
 80028ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a23      	ldr	r2, [pc, #140]	; (8002980 <UART_Start_Receive_DMA+0xd8>)
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	2200      	movs	r2, #0
 80028fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3324      	adds	r3, #36	; 0x24
 8002906:	0019      	movs	r1, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	001a      	movs	r2, r3
 800290e:	1dbb      	adds	r3, r7, #6
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	f7fe f8cd 	bl	8000ab0 <HAL_DMA_Start_IT>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d00c      	beq.n	8002934 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2280      	movs	r2, #128	; 0x80
 800291e:	2110      	movs	r1, #16
 8002920:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2274      	movs	r2, #116	; 0x74
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e01d      	b.n	8002970 <UART_Start_Receive_DMA+0xc8>
    }
  }
  __HAL_UNLOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2274      	movs	r2, #116	; 0x74
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	0049      	lsls	r1, r1, #1
 800294a:	430a      	orrs	r2, r1
 800294c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2101      	movs	r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2140      	movs	r1, #64	; 0x40
 800296a:	430a      	orrs	r2, r1
 800296c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bd80      	pop	{r7, pc}
 8002978:	08002a7d 	.word	0x08002a7d
 800297c:	08002b19 	.word	0x08002b19
 8002980:	08002b55 	.word	0x08002b55

08002984 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	21c0      	movs	r1, #192	; 0xc0
 8002998:	438a      	bics	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2220      	movs	r2, #32
 80029a0:	679a      	str	r2, [r3, #120]	; 0x78
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b002      	add	sp, #8
 80029a8:	bd80      	pop	{r7, pc}
	...

080029ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4912      	ldr	r1, [pc, #72]	; (8002a08 <UART_EndRxTransfer+0x5c>)
 80029c0:	400a      	ands	r2, r1
 80029c2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	438a      	bics	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2110      	movs	r1, #16
 80029e8:	438a      	bics	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	fffffedf 	.word	0xfffffedf

08002a0c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	d014      	beq.n	8002a4c <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2252      	movs	r2, #82	; 0x52
 8002a26:	2100      	movs	r1, #0
 8002a28:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	438a      	bics	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002a4a:	e003      	b.n	8002a54 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f7fd fd08 	bl	8000464 <HAL_UART_TxCpltCallback>
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff fbf7 	bl	8002260 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b004      	add	sp, #16
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d02a      	beq.n	8002ae8 <UART_DMAReceiveCplt+0x6c>
  {
    huart->RxXferCount = 0U;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	225a      	movs	r2, #90	; 0x5a
 8002a96:	2100      	movs	r1, #0
 8002a98:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	491b      	ldr	r1, [pc, #108]	; (8002b14 <UART_DMAReceiveCplt+0x98>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2140      	movs	r1, #64	; 0x40
 8002ac6:	438a      	bics	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <UART_DMAReceiveCplt+0x6c>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2110      	movs	r1, #16
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d108      	bne.n	8002b02 <UART_DMAReceiveCplt+0x86>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2258      	movs	r2, #88	; 0x58
 8002af4:	5a9a      	ldrh	r2, [r3, r2]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	0011      	movs	r1, r2
 8002afa:	0018      	movs	r0, r3
 8002afc:	f7ff fbc8 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b00:	e003      	b.n	8002b0a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f7fd fcef 	bl	80004e8 <HAL_UART_RxCpltCallback>
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b004      	add	sp, #16
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	fffffeff 	.word	0xfffffeff

08002b18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10a      	bne.n	8002b44 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2258      	movs	r2, #88	; 0x58
 8002b32:	5a9b      	ldrh	r3, [r3, r2]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	0011      	movs	r1, r2
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff fba7 	bl	8002290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b42:	e003      	b.n	8002b4c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	0018      	movs	r0, r3
 8002b48:	f7ff fb92 	bl	8002270 <HAL_UART_RxHalfCpltCallback>
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	b004      	add	sp, #16
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	4013      	ands	r3, r2
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d10a      	bne.n	8002b92 <UART_DMAError+0x3e>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b21      	cmp	r3, #33	; 0x21
 8002b80:	d107      	bne.n	8002b92 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2252      	movs	r2, #82	; 0x52
 8002b86:	2100      	movs	r1, #0
 8002b88:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7ff fef9 	bl	8002984 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d10a      	bne.n	8002bb6 <UART_DMAError+0x62>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b22      	cmp	r3, #34	; 0x22
 8002ba4:	d107      	bne.n	8002bb6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	225a      	movs	r2, #90	; 0x5a
 8002baa:	2100      	movs	r1, #0
 8002bac:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7ff fefb 	bl	80029ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2280      	movs	r2, #128	; 0x80
 8002bba:	589b      	ldr	r3, [r3, r2]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff fb59 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b006      	add	sp, #24
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b084      	sub	sp, #16
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	225a      	movs	r2, #90	; 0x5a
 8002be8:	2100      	movs	r1, #0
 8002bea:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2252      	movs	r2, #82	; 0x52
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fb42 	bl	8002280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	438a      	bics	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7fd fc1a 	bl	8000464 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b002      	add	sp, #8
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <__libc_init_array>:
 8002c48:	b570      	push	{r4, r5, r6, lr}
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	4d0c      	ldr	r5, [pc, #48]	; (8002c80 <__libc_init_array+0x38>)
 8002c4e:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <__libc_init_array+0x3c>)
 8002c50:	1b64      	subs	r4, r4, r5
 8002c52:	10a4      	asrs	r4, r4, #2
 8002c54:	42a6      	cmp	r6, r4
 8002c56:	d109      	bne.n	8002c6c <__libc_init_array+0x24>
 8002c58:	2600      	movs	r6, #0
 8002c5a:	f000 f821 	bl	8002ca0 <_init>
 8002c5e:	4d0a      	ldr	r5, [pc, #40]	; (8002c88 <__libc_init_array+0x40>)
 8002c60:	4c0a      	ldr	r4, [pc, #40]	; (8002c8c <__libc_init_array+0x44>)
 8002c62:	1b64      	subs	r4, r4, r5
 8002c64:	10a4      	asrs	r4, r4, #2
 8002c66:	42a6      	cmp	r6, r4
 8002c68:	d105      	bne.n	8002c76 <__libc_init_array+0x2e>
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
 8002c6c:	00b3      	lsls	r3, r6, #2
 8002c6e:	58eb      	ldr	r3, [r5, r3]
 8002c70:	4798      	blx	r3
 8002c72:	3601      	adds	r6, #1
 8002c74:	e7ee      	b.n	8002c54 <__libc_init_array+0xc>
 8002c76:	00b3      	lsls	r3, r6, #2
 8002c78:	58eb      	ldr	r3, [r5, r3]
 8002c7a:	4798      	blx	r3
 8002c7c:	3601      	adds	r6, #1
 8002c7e:	e7f2      	b.n	8002c66 <__libc_init_array+0x1e>
 8002c80:	08002cf0 	.word	0x08002cf0
 8002c84:	08002cf0 	.word	0x08002cf0
 8002c88:	08002cf0 	.word	0x08002cf0
 8002c8c:	08002cf4 	.word	0x08002cf4

08002c90 <memset>:
 8002c90:	0003      	movs	r3, r0
 8002c92:	1812      	adds	r2, r2, r0
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d100      	bne.n	8002c9a <memset+0xa>
 8002c98:	4770      	bx	lr
 8002c9a:	7019      	strb	r1, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	e7f9      	b.n	8002c94 <memset+0x4>

08002ca0 <_init>:
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca6:	bc08      	pop	{r3}
 8002ca8:	469e      	mov	lr, r3
 8002caa:	4770      	bx	lr

08002cac <_fini>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr
